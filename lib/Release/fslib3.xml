<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fslib3</name>
    </assembly>
    <members>
        <member name="T:fslib3.Altseed2.ColorHelper">
            <summary>
            色の処理を補助するクラス
            </summary>
        </member>
        <member name="M:fslib3.Altseed2.ColorHelper.ColorDetermination(fslib3.Altseed2.ColorSet)">
            <summary>
            <see cref="T:Altseed2.Color"/>に変換する
            </summary>
            <param name="colorSet">色の種類</param>
            <exception cref="T:System.ArgumentOutOfRangeException">不正な値が指定された</exception>
        </member>
        <member name="M:fslib3.Altseed2.ColorHelper.GetBrightness(Altseed2.Color)">
            <summary>
            指定した色の明度を取得する
            </summary>
            <param name="color">明度を取得する色</param>
            <returns><paramref name="color"/>の明度</returns>
        </member>
        <member name="M:fslib3.Altseed2.ColorHelper.GetHue(Altseed2.Color)">
            <summary>
            指定した色の色調を取得する
            </summary>
            <param name="color">色調を取得する色</param>
            <returns><paramref name="color"/>の色調</returns>
        </member>
        <member name="M:fslib3.Altseed2.ColorHelper.GetSaturation(Altseed2.Color)">
            <summary>
            指定した色の彩度を取得する
            </summary>
            <param name="color">彩度を取得する色</param>
            <returns><paramref name="color"/>の彩度</returns>
        </member>
        <member name="T:fslib3.Altseed2.ColorSet">
            <summary>
            色の種類を表す
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Red">
            <summary>
            R:255 G:0 B:0 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Orange">
            <summary>
            R:255 G:174 B:38 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Yellow">
            <summary>
            R:255 G:255 B:0 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Green">
            <summary>
            R:0 G:255 B:0 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Blue">
            <summary>
            R:0 G:0 B:255 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Purple">
            <summary>
            R:255 G:0 B:255 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.White">
            <summary>
            R:255 G:255 B:255 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Grey">
            <summary>
            R:217 G:217 B:217 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Black">
            <summary>
            R:0 G:0 B:0 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.WindowDefault">
            <summary>
            R:0 G:0 B:70 A:200
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Transparent">
            <summary>
            R:0 G:0 B:0 A:0
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Copper">
            <summary>
            R:174 G:105 B:56 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Silver">
            <summary>
            R:201 G:202 B:202 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Gold">
            <summary>
            R:218 G:179 B:0 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Platinum">
            <summary>
            R:229 G:229 B:226 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Pink">
            <summary>
            R:255 G:180 B:180 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.YellowGreen">
            <summary>
            R:150 G:255 B:100 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.AquaBlue">
            <summary>
            R:115 G:210 B:240 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Sepia">
            <summary>
            R:107 G:74 B:43 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Magenta">
            <summary>
            R:236 G:0 B:140 A:255
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.ColorSet.Cyan">
            <summary>
            R:0 G:174 B:239 A:255
            </summary>
        </member>
        <member name="T:fslib3.Altseed2.GifImage">
            <summary>
            Gif画像のクラス
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifImage.Count">
            <summary>
            Gif内の画像数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifImage.FilterType">
            <summary>
            テクスチャをフィルタリングする方法を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifImage.Format">
            <summary>
            テクスチャのフォーマットを取得する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifImage.Size">
            <summary>
            テクスチャの大きさを取得する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifImage.WrapMode">
            <summary>
            テクスチャをサンプリングする方法を取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.Altseed2.GifImage.Create(System.String)">
            <summary>
            指定のGifを持つ<see cref="T:fslib3.Altseed2.GifImage"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">読み込むGifのパス</param>
            <returns><paramref name="path"/>のGif画像を読み込んだ<see cref="T:fslib3.Altseed2.GifImage"/>のインスタンス</returns>
        </member>
        <member name="M:fslib3.Altseed2.GifImage.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Altseed2.GifImage.GetCombinedTexture">
            <summary>
            結合されたテクスチャを取得する
            </summary>
            <exception cref="T:System.ObjectDisposedException">インスタンスが既に破棄されている</exception>
            <returns>結合されたテクスチャ</returns>
        </member>
        <member name="M:fslib3.Altseed2.GifImage.Reload">
            <summary>
            Gifを読み込み直す
            </summary>
            <exception cref="T:System.ObjectDisposedException">インスタンスが既に破棄されている</exception>
        </member>
        <member name="T:fslib3.Altseed2.GifSpriteNode">
            <summary>
            Gif画像を表示するノード
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.AlphaBlend">
            <summary>
            ブレンドモードを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.CamaraGroup">
            <summary>
            カメラグループを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.Color">
            <summary>
            色を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.DelayFrame">
            <summary>
            0より大きいテクスチャを切り替えるフレーム数を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0以下</exception>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.ContentSize">
            <inheritdoc/>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.IsDrawn">
            <summary>
            描画されるかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.IsDrawnActually">
            <summary>
            実際に描画されるかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.Material">
            <summary>
            使用するマテリアルを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.Src">
            <summary>
            テクスチャの描画範囲を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.GifSpriteNode.Texture">
            <summary>
            使用するテクスチャを取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.Altseed2.GifSpriteNode.#ctor">
            <summary>
            <see cref="T:fslib3.Altseed2.GifSpriteNode"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="T:fslib3.Altseed2.PolarPosition2F">
            <summary>
            2次元極座標を表すクラス
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.PolarPosition2F.Degree">
            <summary>
            角度（度数法）を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.PolarPosition2F.Length">
            <summary>
            長さを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.PolarPosition2F.Theta">
            <summary>
            角度（弧度法）を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.PolarPosition2F.X">
            <summary>
            X座標を取得する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.PolarPosition2F.Y">
            <summary>
            Y座標を取得する
            </summary>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.#ctor(System.Single,System.Single)">
            <summary>
            <see cref="T:fslib3.Altseed2.PolarPosition2F"/>の新しいインスタンスを生成する
            </summary>
            <param name="length">長さ</param>
            <param name="theta">角度</param>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.#ctor(Altseed2.Vector2F)">
            <summary>
            <see cref="T:fslib3.Altseed2.PolarPosition2F"/>の新しいインスタンスを生成する
            </summary>
            <param name="vector">使用する<see cref="T:Altseed2.Vector2F"/>のインスタンス</param>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.FromXY(System.Single,System.Single)">
            <summary>
            X，Y座標から<see cref="T:fslib3.Altseed2.PolarPosition2F"/>の新しいインスタンスを生成する
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <returns>指定した座標を持つ<see cref="T:fslib3.Altseed2.PolarPosition2F"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.Equals(fslib3.Altseed2.PolarPosition2F)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.ToString">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Altseed2.PolarPosition2F.ToVector">
            <summary>
            <see cref="T:Altseed2.Vector2F"/>に変換する
            </summary>
            <returns><see cref="T:Altseed2.Vector2F"/>のインスタンス</returns>
        </member>
        <member name="T:fslib3.Altseed2.SoundPlus">
            <summary>
            音源のID管理を楽にするクラス
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.IsPlayBackSpeedEnabled">
            <summary>
            再生速度を変更可能かどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.Length">
            <summary>
            音源の長さ(秒)を取得する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.LoopEndingPoint">
            <summary>
            ループ終了地点(秒)を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が<see cref="P:fslib3.Altseed2.SoundPlus.LoopStartingPoint"/>以下または<see cref="P:fslib3.Altseed2.SoundPlus.Length"/>より大きい</exception>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.LoopStartingPoint">
            <summary>
            ループ開始地点(秒)を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0未満または<see cref="P:fslib3.Altseed2.SoundPlus.LoopEndingPoint"/>以上</exception>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.PanningPosition">
            <summary>
            パン位置(左：-1.0f～中央：0.0f～右：1.0f)を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が-1.0f未満または1.0fより大きい</exception>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.PlayBackPosition">
            <summary>
            再生位置を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0.0f未満または<see cref="P:fslib3.Altseed2.SoundPlus.Length"/>より大きい</exception>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.PlayBackSpeed">
            <summary>
            再生速度を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.State">
            <summary>
            音源の再生状況を取得する
            </summary>
        </member>
        <member name="P:fslib3.Altseed2.SoundPlus.Volume">
            <summary>
            音量(0.0f～1.0f)を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が0.0f未満または1.0fより大きい</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.#ctor(Altseed2.Sound)">
            <summary>
            新しいインスタンスを生成する
            </summary>
            <param name="sound">使用する音源</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sound"/>がnull</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.Fade(System.Single,System.Single)">
            <summary>
            指定した音の音量を一定時間かけて変更する
            </summary>
            <param name="seconds">フェードに使用する時間(秒)</param>
            <param name="targetedVolume">変更後の音量(0.0f〜1.0f)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds"/>が0.0f未満若しくは<paramref name="targetedVolume"/>が0.0f未満または1.0fより大きい</exception>
            <exception cref="T:System.InvalidOperationException">音が再生中ではない</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.FadeIn(System.Single)">
            <summary>
            指定した音をフェードインさせる
            </summary>
            <param name="seconds">フェードインに使用する時間(秒)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds"/>が0.0f未満</exception>
            <exception cref="T:System.InvalidOperationException">音が再生中ではない</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.FadeOut(System.Single)">
            <summary>
            指定した音をフェードアウトさせる
            </summary>
            <param name="seconds">フェードアウトに使用する時間(秒)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="seconds"/>が0.0f未満</exception>
            <exception cref="T:System.InvalidOperationException">音が再生中ではない</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.ForcePlay">
            <summary>
            現在の状況に関係なく強制的に音を再生する
            </summary>
            <remarks>IDは更新され，それまでに再生されていた音IDは管理外になる</remarks>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.GetSpectrum(System.Int32,Altseed2.FFTWindow)">
            <summary>
            再生中の音のスペクトル情報を取得します。
            </summary>
            <param name="dataNum">音のスペクトル情報を格納するための配列の容量</param>
            <param name="window">フーリエ変換に用いる窓関数</param>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.Pause">
            <summary>
            一時停止にする
            </summary>
            <exception cref="T:System.InvalidOperationException">音が既に一時停止または再生されていない</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.Play">
            <summary>
            音源を再生する
            </summary>
            <exception cref="T:System.InvalidOperationException">既に音源が再生中または一時停止中</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.PlayWithoutUpdateID">
            <summary>
            このインスタンスの管理IDはそのままで音を再生する
            </summary>
            <returns>再生された音のID</returns>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.Resume">
            <summary>
            一時停止を解除する
            </summary>
            <exception cref="T:System.InvalidOperationException">音源が一時停止中ではない</exception>
        </member>
        <member name="M:fslib3.Altseed2.SoundPlus.Stop">
            <summary>
            停止する
            </summary>
            <exception cref="T:System.InvalidOperationException">既に停止状態にある</exception>
        </member>
        <member name="T:fslib3.Altseed2.SoundState">
            <summary>
            音源の再生状況を表す
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.SoundState.Stopped">
            <summary>
            停止中
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.SoundState.Paused">
            <summary>
            一時停止中
            </summary>
        </member>
        <member name="F:fslib3.Altseed2.SoundState.Played">
            <summary>
            再生中
            </summary>
        </member>
        <member name="T:fslib3.ArrayHelper">
            <summary>
            配列の補助クラス
            </summary>
        </member>
        <member name="M:fslib3.ArrayHelper.Clear(System.Array)">
            <summary>
            全ての要素を削除する
            </summary>
            <param name="array">要素を削除する配列のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.OverflowException"><paramref name="array"/>の要領が<see cref="F:System.Int32.MaxValue"/>を超える</exception>
        </member>
        <member name="M:fslib3.ArrayHelper.Contains``1(``0[],``0)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
            <param name="array">検索に使用する配列</param>
            <param name="value">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns><paramref name="array"/>に<paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.ArrayHelper.Create``1(System.Int32)">
            <summary>
            指定したサイズの1次元配列のインスタンスを生成する
            </summary>
            <typeparam name="T">格納される要素の型</typeparam>
            <param name="length">配列のサイズ</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length"/>がnull</exception>
            <returns>長さが<paramref name="length"/>の1次元配列のインスタンス</returns>
        </member>
        <member name="M:fslib3.ArrayHelper.CreateHashCode(System.Array)">
            <summary>
            配列の長さと全ての要素に応じたハッシュコードを返す
            </summary>
            <param name="array">使用する配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <returns><paramref name="array"/>の長さと全ての要素を使用したハッシュコード</returns>
        </member>
        <member name="M:fslib3.ArrayHelper.CreateHashCode(System.Array,System.Int32)">
            <summary>
            配列の長さと要素に応じたハッシュコードを返す
            </summary>
            <param name="array">使用する配列</param>
            <param name="hashLength">ハッシュコード生成に使用する要素の個数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hashLength"/>が0未満または<see cref="P:System.Array.Length"/>未満</exception>
            <exception cref="T:System.OverflowException"><paramref name="array"/>の要領が<see cref="F:System.Int32.MaxValue"/>よりも大きい</exception>
            <returns><paramref name="array"/>の長さと<paramref name="hashLength"/>に応じた個数分の要素を使用したハッシュコード</returns>
        </member>
        <member name="M:fslib3.ArrayHelper.CreateHashCode(System.Array,System.Int64)">
            <summary>
            配列の長さと要素に応じたハッシュコードを返す
            </summary>
            <param name="array">使用する配列</param>
            <param name="hashLength">ハッシュコード生成に使用する要素の個数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="hashLength"/>が0未満または<see cref="P:System.Array.LongLength"/>未満</exception>
            <returns><paramref name="array"/>の長さと<paramref name="hashLength"/>に応じた個数分の要素を使用したハッシュコード</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3">
            <summary>
            2つのキーの組み合わせで検索するディクショナリのクラス
            </summary>
            <typeparam name="TKey1">格納するキーの型1</typeparam>
            <typeparam name="TKey2">格納するキーの型2</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Comparer1">
            <summary>
            <typeparamref name="TKey1"/>型のキーの比較に使用する等価比較子を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Comparer2">
            <summary>
            <typeparamref name="TKey2"/>型のキーの比較に使用する等価比較子を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Keys1">
            <summary>
            <typeparamref name="TKey1"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Keys2">
            <summary>
            <typeparamref name="TKey2"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Values">
            <summary>
            <typeparamref name="TValue"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.#ctor">
            <summary>
            既定の容量と等価比較子を備えた<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の等価比較子を備えた<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            既定の容量と指定した等価比較子を備えた<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer1">使用する<typeparamref name="TKey1"/>の等価比較子</param>
            <param name="comparer2">使用する<typeparamref name="TKey2"/>の等価比較子</param>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定した容量と等価比較子を備えた<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer1">使用する<typeparamref name="TKey1"/>の等価比較子</param>
            <param name="comparer2">使用する<typeparamref name="TKey2"/>の等価比較子</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEnumerable{fslib3.Collections.DoubleKeyValuePair{`0,`1,`2}})">
            <summary>
            指定したコレクションのコピーと既定の等価比較子を備えた<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">コピーするコレクション</param>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/>にキーの組み合わせの重複がある</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.#ctor(System.Collections.Generic.IEnumerable{fslib3.Collections.DoubleKeyValuePair{`0,`1,`2}},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            指定したコレクションのコピーと等価比較子を備えた<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">コピーするコレクション</param>
            <param name="comparer1">使用する<typeparamref name="TKey1"/>の等価比較子</param>
            <param name="comparer2">使用する<typeparamref name="TKey2"/>の等価比較子</param>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/>にキーの組み合わせの重複がある</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされた情報をもとに<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアライズされた情報を格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値を取得または設定する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせを持つ値を取得できなかった</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>を持つ値</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Add(`0,`1,`2)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key1">追加するキー1</param>
            <param name="key2">追加するキー2</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーの組み合わせが格納されているかどうかを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ContainsValue(`2)">
            <summary>
            指定した値が格納されているかどうかを返す
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib3.Collections.DoubleKeyDictionary`3.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズする情報を設定する
            </summary>
            <param name="info">シリアライズする情報を格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.GetOrAdd(`0,`1,`2)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する 取得できなかった場合は指定した値に設定する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが存在しない場合に設定する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせに値が存在したらその値，存在していなかったら<paramref name="value"/>と同じ値</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現段階ではサポートされていない 常にnullを返す</param>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Remove(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値を削除する
            </summary>
            <param name="key1">削除する値のキー1</param>
            <param name="key2">削除する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせを持つ値を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Remove(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ値を削除する
            </summary>
            <param name="key1">削除する値のキー1</param>
            <param name="key2">削除する値のキー2</param>
            <param name="removed">削除された値 削除に失敗したら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせを持つ値を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.TryAdd(`0,`1,`2)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key1">追加するキー1</param>
            <param name="key2">追加するキー2</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせに重複なく追加出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="value"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection">
            <summary>
            <typeparamref name="TKey1"/>型の値を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.#ctor(fslib3.Collections.DoubleKeyDictionary{`0,`1,`2})">
            <summary>
            指定した<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>のインスタンスを用いて<see cref="T:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">使用する<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーする要素の個数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>または<paramref name="count"/>が0未満，若しくは<paramref name="count"/>が<see cref="P:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key1Collection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection">
            <summary>
            <typeparamref name="TKey2"/>型の値を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.#ctor(fslib3.Collections.DoubleKeyDictionary{`0,`1,`2})">
            <summary>
            指定した<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>のインスタンスを用いて<see cref="T:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">使用する<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Contains(`1)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.CopyTo(`1[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.CopyTo(`1[],System.Int32,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーする要素の個数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>または<paramref name="count"/>が0未満，若しくは<paramref name="count"/>が<see cref="P:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.Key2Collection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection">
            <summary>
            <typeparamref name="TValue"/>型の値を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.#ctor(fslib3.Collections.DoubleKeyDictionary{`0,`1,`2})">
            <summary>
            指定した<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>のインスタンスを用いて<see cref="T:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">使用する<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Contains(`2)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.CopyTo(`2[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.CopyTo(`2[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.CopyTo(`2[],System.Int32,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーする要素の個数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>または<paramref name="count"/>が0未満，若しくは<paramref name="count"/>が<see cref="P:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyDictionary`3.ValueCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.DoubleKeyValuePair`3">
            <summary>
            キー2つと値1つを格納する構造体
            </summary>
            <typeparam name="TKey1">格納するキーの型1</typeparam>
            <typeparam name="TKey2">格納するキーの型2</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyValuePair`3.Key1">
            <summary>
            格納されるキー1を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyValuePair`3.Key2">
            <summary>
            格納されるキー2を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.DoubleKeyValuePair`3.Value">
            <summary>
            格納されている値を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyValuePair`3.#ctor(`0,`1,`2)">
            <summary>
            <see cref="T:fslib3.Collections.DoubleKeyValuePair`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="key1">使用するキー1</param>
            <param name="key2">使用するキー2</param>
            <param name="value">使用する値</param>
        </member>
        <member name="M:fslib3.Collections.DoubleKeyValuePair`3.GetHashCode">
            <summary>
            ハッシュコードを取得する
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="T:fslib3.Collections.General.CollectionWrapper`1">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/>のラッパークラス<see cref="T:System.Collections.ICollection"/>の実装をサポートする
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.General.CollectionWrapper`1.Items">
            <summary>
            基となるコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.General.CollectionWrapper`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.#ctor">
            <summary>
            <see cref="T:fslib3.Collections.General.CollectionWrapper`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="T:fslib3.Collections.General.CollectionWrapper`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーする<see cref="T:System.Collections.Generic.IEnumerable`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            <see cref="T:fslib3.Collections.General.CollectionWrapper`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">使用する<see cref="T:System.Collections.Generic.ICollection`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.Add(`0)">
            <summary>
            要素を追加する
            </summary>
            <param name="item">追加する要素</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.CollectionWrapper`1.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.Clear">
            <summary>
            全ての要素を削除する
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.CollectionWrapper`1.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex">コピー開始インデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.GetEnumerator">
            <summary>
            列挙をサポートする列挙子を取得する
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.Remove(`0)">
            <summary>
            指定した要素を削除する
            </summary>
            <param name="item">削除する要素</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.CollectionWrapper`1.Items"/>が読み取り専用</exception>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.AddItem(`0)">
            <summary>
            要素を追加する
            </summary>
            <param name="item">追加する要素</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.CollectionWrapper`1.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.ClearItems">
            <summary>
            全ての要素を削除する
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.CollectionWrapper`1.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.CollectionWrapper`1.RemoveItem(`0)">
            <summary>
            指定した要素を削除する
            </summary>
            <param name="item">削除する要素</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.CollectionWrapper`1.Items"/>が読み取り専用</exception>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.General.DictionaryWrapper`2">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary`2"/>のラッパークラス <see cref="T:System.Collections.IDictionary"/>の実装をサポートする
            </summary>
            <typeparam name="TKey">格納するキーの型</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.General.DictionaryWrapper`2.Items">
            <summary>
            基となるディクショナリを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.General.DictionaryWrapper`2.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.General.DictionaryWrapper`2.Keys">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.General.DictionaryWrapper`2.Values">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.#ctor">
            <summary>
            <see cref="T:fslib3.Collections.General.DictionaryWrapper`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <see cref="T:fslib3.Collections.General.DictionaryWrapper`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーする<see cref="T:System.Collections.Generic.IEnumerable`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            <see cref="T:fslib3.Collections.General.DictionaryWrapper`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">使用する<see cref="T:System.Collections.Generic.IDictionary`2"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
        </member>
        <member name="P:fslib3.Collections.General.DictionaryWrapper`2.Item(`0)">
            <summary>
            指定したキーを持つ要素を取得または設定する
            </summary>
            <param name="key">検索する要素のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/>が存在しない</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
            <returns><paramref name="key"/>を持つ値</returns>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.Add(`0,`1)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/>が既に存在する</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.Clear">
            <summary>
            全ての要素を削除する
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.ContainsKey(`0)">
            <summary>
            指定したキーが格納されているかどうかを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex">コピー開始インデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.GetEnumerator">
            <summary>
            列挙をサポートする列挙子を取得する
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.Remove(`0)">
            <summary>
            指定したキーを持つ要素を削除する
            </summary>
            <param name="key">削除する要素のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
            <returns><paramref name="key"/>を持つ要素を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.TryGetValue(`0,`1@)">
            <summary>
            指定したキーを持つ値を取得する
            </summary>
            <param name="key">検索するキー</param>
            <param name="value"><paramref name="key"/>を持つ値 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.AddItem(`0,`1)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/>が既に存在する</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.ClearItems">
            <summary>
            全ての要素を削除する
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.RemoveItem(`0)">
            <summary>
            指定したキーを持つ要素を削除する
            </summary>
            <param name="key">削除する要素のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
            <returns><paramref name="key"/>を持つ要素を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.General.DictionaryWrapper`2.SetItem(`0,`1)">
            <summary>
            指定したキーを持つ要素を設定する
            </summary>
            <param name="key">検索する要素のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
        </member>
        <member name="T:fslib3.Collections.General.WrapDictionaryEnumerator`2">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary`2"/>の列挙をサポートする構造体
            </summary>
            <typeparam name="TKey">列挙する要素のキーの型</typeparam>
            <typeparam name="TValue">列挙する要素の値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.General.WrapDictionaryEnumerator`2.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.General.WrapDictionaryEnumerator`2.Key">
            <summary>
            現在列挙されているキーを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.General.WrapDictionaryEnumerator`2.Value">
            <summary>
            現在列挙されている値を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrapDictionaryEnumerator`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            <see cref="T:fslib3.Collections.General.WrapDictionaryEnumerator`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="source">使用する<see cref="T:System.Collections.Generic.IDictionary`2"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.General.WrapDictionaryEnumerator`2.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrapDictionaryEnumerator`2.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.General.WrapEnumerator`1">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>の列挙をサポートする構造体
            </summary>
            <typeparam name="T">列挙する要素の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.General.WrapEnumerator`1.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrapEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="T:fslib3.Collections.General.WrapEnumerator`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="source">使用する<see cref="T:System.Collections.Generic.IEnumerable`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.General.WrapEnumerator`1.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrapEnumerator`1.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.General.WrappedObservableDictionary`2">
            <summary>
            コレクションの変更を通知するディクショナリのクラス
            </summary>
            <typeparam name="TKey">格納するキーの型</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.#ctor">
            <summary>
            <see cref="T:fslib3.Collections.General.WrappedObservableDictionary`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            <see cref="T:fslib3.Collections.General.WrappedObservableDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素をコピーする<see cref="T:System.Collections.Generic.IEnumerable`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            <see cref="T:fslib3.Collections.General.WrappedObservableDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">使用する<see cref="T:System.Collections.Generic.IDictionary`2"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
        </member>
        <member name="E:fslib3.Collections.General.WrappedObservableDictionary`2.CollectionChanged">
            <summary>
            コレクションが変更された時に実行
            </summary>
        </member>
        <member name="E:fslib3.Collections.General.WrappedObservableDictionary`2.PropertyChanged">
            <summary>
            プロパティが変更された時に実行
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.Move(`0,`0)">
            <summary>
            キーを変更する
            </summary>
            <param name="oldKey">移動前のキー</param>
            <param name="newKey">移動先のキー</param>
            <exception cref="T:System.ArgumentException"><paramref name="newKey"/>が既に存在している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey"/>か<paramref name="newKey"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey"/>が存在しない</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            <see cref="E:fslib3.Collections.General.WrappedObservableDictionary`2.CollectionChanged"/>を実行する
            </summary>
            <param name="e">使用するイベントの情報</param>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            <see cref="E:fslib3.Collections.General.WrappedObservableDictionary`2.PropertyChanged"/>を実行する
            </summary>
            <param name="e">使用するイベントの情報</param>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.BlockReentrancy">
            <summary>
            コレクションをロックする
            </summary>
            <returns>コレクションのロックを管理するオブジェクト 破棄するとロックが解除される</returns>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.CheckReentrancy">
            <summary>
            コレクションがロックされているかどうかを検証する
            </summary>
            <exception cref="T:System.InvalidOperationException">コレクションがロックされている</exception>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.AddItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.MoveItem(`0,`0)">
            <summary>
            キーを変更する
            </summary>
            <param name="oldKey">移動前のキー</param>
            <param name="newKey">移動先のキー</param>
            <exception cref="T:System.ArgumentException"><paramref name="newKey"/>が既に存在している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldKey"/>か<paramref name="newKey"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="oldKey"/>が存在しない</exception>
            <exception cref="T:System.NotSupportedException"><see cref="P:fslib3.Collections.General.DictionaryWrapper`2.Items"/>が読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.RemoveItem(`0)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableDictionary`2.SetItem(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Collections.General.WrappedObservableList`1">
            <summary>
            コレクションの変更を通知するリストのクラス
            </summary>
            <typeparam name="T">格納される要素の型</typeparam>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.#ctor">
            <summary>
            <see cref="T:fslib3.Collections.General.WrappedObservableList`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            <see cref="T:fslib3.Collections.General.WrappedObservableList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="list">ラップする<see cref="T:System.Collections.Generic.IList`1"/>のインスタンス</param>
        </member>
        <member name="E:fslib3.Collections.General.WrappedObservableList`1.CollectionChanged">
            <summary>
            コレクションが変更されたときに実行
            </summary>
        </member>
        <member name="E:fslib3.Collections.General.WrappedObservableList`1.PropertyChanged">
            <summary>
            プロパティが変更されたときに実行
            </summary>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            <see cref="E:fslib3.Collections.General.WrappedObservableList`1.CollectionChanged"/>を実行する
            </summary>
            <param name="e">使用するイベントの情報</param>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            <see cref="E:fslib3.Collections.General.WrappedObservableList`1.PropertyChanged"/>を実行する
            </summary>
            <param name="e">使用するイベントの情報</param>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Collections.General.WrappedObservableList`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Collections.HashList`1">
            <summary>
            ハッシュテーブルの配列クラス
            </summary>
            <typeparam name="T">格納される要素の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.HashList`1.Capacity">
            <summary>
            容量を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`1.Comparer">
            <summary>
            使用する比較子を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`1.#ctor">
            <summary>
            既定の容量と比較子を備えた<see cref="T:fslib3.Collections.HashList`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`1.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた<see cref="T:fslib3.Collections.HashList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            既定の容量と指定した比較子を備えた<see cref="T:fslib3.Collections.HashList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer"><typeparamref name="T"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
        </member>
        <member name="M:fslib3.Collections.HashList`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定した容量と比較子を備えた<see cref="T:fslib3.Collections.HashList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer"><typeparamref name="T"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentException">キーが重複している</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したコレクションのコピーと既定の比較子を備えた<see cref="T:fslib3.Collections.HashList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素のコピーをするコレクションのインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定したコレクションのコピーと比較子を備えた<see cref="T:fslib3.Collections.HashList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素のコピーをするコレクションのインスタンス</param>
            <param name="comparer"><typeparamref name="T"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentException">キーが重複している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:fslib3.Collections.HashList`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアライズされた情報を格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="P:fslib3.Collections.HashList`1.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得する
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="index"/>に対応する要素が格納されていない</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.HashList`1.Capacity"/>以上</exception>
            <returns><paramref name="index"/>に対応する要素</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`1.Add(`0)">
            <summary>
            要素を追加する
            </summary>
            <param name="item">追加する要素</param>
            <returns><paramref name="item"/>を追加出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`1.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`1.CopyTo(`0[])">
            <summary>
            要素を配列にコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>がサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.CopyTo(`0[],System.Int32)">
            <summary>
            要素を配列にコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>がサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            要素を配列にコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーする要素数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>がサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="arrayIndex"/>が0未満<br></br>
            - <paramref name="count"/>が0未満<br></br>
            - <paramref name="count"/>が<see cref="P:fslib3.Collections.HashList`1.Count"/>より大きい
            </exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`1.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.HashList`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズする情報を設定する
            </summary>
            <param name="info">シリアライズする情報を格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.IndexOf(`0)">
            <summary>
            指定した要素のインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>のインデックス 格納されていなかったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`1.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在サポートされていない 常にnullを返す</param>
        </member>
        <member name="M:fslib3.Collections.HashList`1.Remove(`0)">
            <summary>
            指定した要素を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`1.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="index"/>に対応する要素が格納されていない</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.HashList`1.Capacity"/>以上</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.RemoveAt(System.Int32,`0@)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <param name="item">削除された要素</param>
            <exception cref="T:System.ArgumentException"><paramref name="index"/>に対応する要素が格納されていない</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.HashList`1.Capacity"/>以上</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`1.ToArray">
            <summary>
            同じ要素を格納する配列を生成する
            </summary>
            <returns>同じ要素を格納する配列の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`1.TrimExcess">
            <summary>
            余分な容量を削る
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`1.TryGetValue(`0,`0@)">
            <summary>
            指定した値と等しい要素を取得する
            </summary>
            <param name="equalValue">検索する要素</param>
            <param name="actualValue">実際に格納されている要素 <paramref name="equalValue"/>が格納されていなかったら既定値</param>
            <returns><paramref name="actualValue"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.HashList`1.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`1.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`1.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`1.Enumerator.MoveNext">
            <summary>
            列挙を次の要素に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.HashList`2">
            <summary>
            ディクショナリの配列クラス
            </summary>
            <typeparam name="TKey">格納するキーの型</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="T:fslib3.Collections.HashList`2.Entry">
            <summary>
            格納される要素の型
            </summary>
        </member>
        <member name="F:fslib3.Collections.HashList`2.Entry.Empty">
            <summary>
            無効なインスタンスを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Entry.HashCode">
            <summary>
            ハッシュコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Entry.Key">
            <summary>
            格納されているキーを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Entry.Next">
            <summary>
            次の要素のインデックスを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Entry.Value">
            <summary>
            格納されている値を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`2.Entry.Clone">
            <summary>
            同じ要素を持つ<see cref="T:fslib3.Collections.HashList`2.Entry"/>の新しいインスタンスを返す
            </summary>
            <returns>同じ要素を持つこのインスタンスのコピー</returns>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Comparer">
            <summary>
            <typeparamref name="TKey"/>の等価性を比較する比較子を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`2.LargeCount">
            <summary>
            容量を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`2.#ctor">
            <summary>
            既定の容量と比較子を備えた<see cref="T:fslib3.Collections.HashList`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`2.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた<see cref="T:fslib3.Collections.HashList`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            既定の容量と指定した比較子を備えた<see cref="T:fslib3.Collections.HashList`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer"><typeparamref name="TKey"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
        </member>
        <member name="M:fslib3.Collections.HashList`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定した容量と比較子を備えた<see cref="T:fslib3.Collections.HashList`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer"><typeparamref name="TKey"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            指定したコレクションのコピーと既定の比較子を備えた<see cref="T:fslib3.Collections.HashList`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素のコピーをするコレクションのインスタンス</param>
            <exception cref="T:System.ArgumentException">キーが重複している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定したコレクションのコピーと比較子を備えた<see cref="T:fslib3.Collections.HashList`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">要素のコピーをするコレクションのインスタンス</param>
            <param name="comparer"><typeparamref name="TKey"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentException">キーが重複している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズされたデータをもとに<see cref="T:fslib3.Collections.HashList`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="info">シリアライズされた情報を格納するオブジェクト</param>
            <param name="context">送信元の情報</param>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Item(`0)">
            <summary>
            指定したキーを持つ値を取得または設定する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/>が格納されていない</exception>
            <returns><paramref name="key"/>を持つ要素</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.Add(`0,`1)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/>が重複している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`2.CalcHashCode(`0)">
            <summary>
            指定した<typeparamref name="TKey"/>の値をもとにハッシュコードを計算する
            </summary>
            <param name="key">ハッシュコードの算出に使用する<typeparamref name="TKey"/>型の値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>をもとに算出されたハッシュコード</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`2.Contains(`0,`1)">
            <summary>
            指定したキーと値の組み合わせが格納されているかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <param name="value">検索する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>と<paramref name="value"/>の組み合わせが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.ContainsKey(`0)">
            <summary>
            指定したキーを持つ値が格納されているかどうかを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.ContainsValue(`1)">
            <summary>
            指定した値が格納されているかどうかを返す
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.EnumerateAllKeys">
            <summary>
            全てのキーを列挙する
            </summary>
            <returns>全てのキー</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.EnumerateAllValues">
            <summary>
            全ての値を列挙する
            </summary>
            <returns>全ての要素</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib3.Collections.HashList`2.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            シリアライズする情報を設定する
            </summary>
            <param name="info">シリアライズする情報を格納するオブジェクト</param>
            <param name="context">送信先の情報</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`2.IndexOf(`0,`1)">
            <summary>
            指定したキーと値の組み合わせを持つ要素のインデックスを返す
            </summary>
            <param name="key">検索するキー</param>
            <param name="value">検索する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>と<paramref name="value"/>の組み合わせの持つインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.IndexOfKey(`0)">
            <summary>
            指定したキーを持つ要素のインデックスを返す
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.IndexOfValue(`1)">
            <summary>
            指定した値のインデックスを返す
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.IsCompatibleEntry(System.Int32)">
            <summary>
            指定したインデックスの要素が有効かどうかを返す
            </summary>
            <param name="index">検索する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が範囲外</exception>
            <returns><paramref name="index"/>の要素が有効であればtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.OnDeserialization(System.Object)">
            <summary>
            デシリアライズ時に実行
            </summary>
            <param name="sender">現在サポートされていない 常にnullを返す</param>
        </member>
        <member name="M:fslib3.Collections.HashList`2.Remove(`0)">
            <summary>
            指定したキーを持つ要素を削除する
            </summary>
            <param name="key">削除する要素のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="index"/>が無効なインデックス</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が範囲外</exception>
        </member>
        <member name="M:fslib3.Collections.HashList`2.TryAdd(`0,`1)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>要素を追加出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.HashList`2.TryGetValue(`0,`1@)">
            <summary>
            指定したキーを持つ要素を取得する
            </summary>
            <param name="key">検索するキー</param>
            <param name="value"><paramref name="key"/>を持つ値 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="value"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.HashList`2.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.HashList`2.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`2.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.HashList`2.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.IDoubleKeyDictionary`3">
            <summary>
            2つのキーの組み合わせで検索を行うコレクションのインターフェイス
            </summary>
            <typeparam name="TKey1">格納するキーの型1</typeparam>
            <typeparam name="TKey2">格納するキーの型2</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.IDoubleKeyDictionary`3.Keys1">
            <summary>
            <typeparamref name="TKey1"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IDoubleKeyDictionary`3.Keys2">
            <summary>
            <typeparamref name="TKey2"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IDoubleKeyDictionary`3.Values">
            <summary>
            <typeparamref name="TValue"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値を取得または設定する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせを持つ値を取得できなかった</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>を持つ値</returns>
        </member>
        <member name="M:fslib3.Collections.IDoubleKeyDictionary`3.Add(`0,`1,`2)">
            <summary>
            指定したキーと値の組み合わせを追加する
            </summary>
            <param name="key1">追加するキー1</param>
            <param name="key2">追加するキー2</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが既に存在している</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.IDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーの組み合わせが格納されているかどうかを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.IDoubleKeyDictionary`3.Remove(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値を削除する
            </summary>
            <param name="key1">削除する値のキー1</param>
            <param name="key2">削除する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせを持つ値を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.IDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="value"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.IOrderedDictionary`2">
            <summary>
            インデックス操作が可能なディクショナリを表す
            </summary>
            <typeparam name="TKey">格納されるキーの型</typeparam>
            <typeparam name="TValue">格納される値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.IOrderedDictionary`2.Keys">
            <summary>
            格納されているキーのリストを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IOrderedDictionary`2.Values">
            <summary>
            格納されている値のリストを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            指定したインデックスの値を取得または設定する
            </summary>
            <param name="index">検索するインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <exception cref="T:System.NotSupportedException">このコレクションが読み取り専用</exception>
            <returns><paramref name="index"/>に対応した値</returns>
        </member>
        <member name="M:fslib3.Collections.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            指定したインデックスにキーと値のペアを挿入する
            </summary>
            <param name="index">挿入位置</param>
            <param name="key">挿入するキー</param>
            <param name="value">挿入する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/>が既に存在する</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>より大きい</exception>
            <exception cref="T:System.NotSupportedException">このコレクションが読み取り専用</exception>
        </member>
        <member name="M:fslib3.Collections.IOrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <exception cref="T:System.NotSupportedException">このコレクションが読み取り専用</exception>
        </member>
        <member name="T:fslib3.Collections.IReadOnlyDoubleKeyDictionary`3">
            <summary>
            2つのキーの組み合わせで検索を行う読み取り専用のコレクションのインターフェイス
            </summary>
            <typeparam name="TKey1">格納するキーの型1</typeparam>
            <typeparam name="TKey2">格納するキーの型2</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.IReadOnlyDoubleKeyDictionary`3.Keys1">
            <summary>
            <typeparamref name="TKey1"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IReadOnlyDoubleKeyDictionary`3.Keys2">
            <summary>
            <typeparamref name="TKey2"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IReadOnlyDoubleKeyDictionary`3.Values">
            <summary>
            <typeparamref name="TValue"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.IReadOnlyDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせを持つ値を取得できなかった</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>を持つ値</returns>
        </member>
        <member name="M:fslib3.Collections.IReadOnlyDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーの組み合わせが格納されているかどうかを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.IReadOnlyDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="value"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2">
            <summary>
            キーで値を検索できるコレクションのクラス
            </summary>
            <typeparam name="TKey">格納されるキーの型</typeparam>
            <typeparam name="TValue">格納されてる値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.Comparer">
            <summary>
            使用する等価比較子を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.Keys">
            <summary>
            格納されているキーのコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.Values">
            <summary>
            格納されている値のコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.#ctor">
            <summary>
            既定の容量と比較子を備えた<see cref="T:fslib3.Collections.KeyedCollection`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた<see cref="T:fslib3.Collections.KeyedCollection`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            既定の容量と指定した比較子を備えた<see cref="T:fslib3.Collections.KeyedCollection`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer"><typeparamref name="TKey"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定した容量と比較子を備えた<see cref="T:fslib3.Collections.KeyedCollection`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer"><typeparamref name="TKey"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.Item(`0)">
            <summary>
            指定したキーを持つ要素を全て取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/>が存在しない</exception>
            <returns><paramref name="key"/>を持つ全ての要素</returns>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.Item(`0,System.Int32)">
            <summary>
            指定したキーとインデックスの値を取得または設定する
            </summary>
            <param name="key">検索するキー</param>
            <param name="index">検索するインデックス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<paramref name="key"/>を持つ要素数以上</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/>が存在しない</exception>
            <returns><paramref name="key"/>と<paramref name="index"/>を持つ要素</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.Add(`0,`1)">
            <summary>
            指定したキーと値のペアを末尾に追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.Contains(`0,`1)">
            <summary>
            指定したキーと値の組み合わせが存在するかどうかを取得する
            </summary>
            <param name="key">検索するキー</param>
            <param name="value">検索する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>と<paramref name="value"/>の組み合わせが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ContainsKey(`0)">
            <summary>
            指定したキーが格納されているかどうかを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ContainsValue(`1)">
            <summary>
            指定した値が格納されているかどうかを取得する
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.KeyedCollection`2.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.Remove(`0,`1)">
            <summary>
            指定したキーと値のペアを削除する
            </summary>
            <param name="key">削除するキー</param>
            <param name="value">削除する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>と<paramref name="value"/>のペアを削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.RemoveAll(`0)">
            <summary>
            指定したキーを持つ熱値を全て削除する
            </summary>
            <param name="key">削除する値のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns>削除された<paramref name="key"/>を持つ要素数</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.TryGetList(`0,fslib3.Collections.KeyedCollection{`0,`1}.ValueList@)">
            <summary>
            指定したキーを持つ要素を全て取得する
            </summary>
            <param name="key">取得する要素のキー</param>
            <param name="list"><paramref name="key"/>を持つ要素のリスト 見つからなかったらnull</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="list"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2.KeyCollection">
            <summary>
            格納されているキーのコレクションのクラス
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.KeyCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.KeyCollection.#ctor(fslib3.Collections.KeyedCollection{`0,`1})">
            <summary>
            <see cref="T:fslib3.Collections.KeyedCollection`2.KeyCollection"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">使用する<see cref="T:fslib3.Collections.KeyedCollection`2"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.KeyCollection.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始インデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.KeyCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.KeyedCollection`2.KeyCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2.KeyCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.KeyCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.KeyCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2.ValueCollection">
            <summary>
            格納されている値のコレクションのクラス
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.ValueCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueCollection.#ctor(fslib3.Collections.KeyedCollection{`0,`1})">
            <summary>
            <see cref="T:fslib3.Collections.KeyedCollection`2.ValueCollection"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">使用する<see cref="T:fslib3.Collections.KeyedCollection`2"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueCollection.Contains(`1)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始インデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueCollection.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.KeyedCollection`2.ValueCollection.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2.ValueCollection.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.ValueCollection.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueCollection.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2.ValueList">
            <summary>
            同じキーを持つ値のリスト
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.ValueList.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.ValueList.Key">
            <summary>
            キーを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.ValueList.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得または設定する
            </summary>
            <param name="index">検索するインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上</exception>
            <returns><paramref name="index"/>に該当する要素</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Add(`1)">
            <summary>
            指定した要素を末尾に追加する
            </summary>
            <param name="item">追加する要素</param>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            複数の要素を末尾にまとめて追加する
            </summary>
            <param name="collection">追加する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.BinarySearch(`1)">
            <summary>
            ソートされたリストから指定した要素のインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValue"/>が<see cref="T:System.IComparable`1"/>を実装していない</exception>
            <returns><paramref name="item"/>のインデックス 無かったら次の要素のインデックスとビットが相補的な値</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.BinarySearch(`1,System.Collections.Generic.IComparer{`1})">
            <summary>
            ソートされたリストから指定した要素のインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <param name="comparer">検索に使用する比較子</param>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValue"/>が<see cref="T:System.IComparable`1"/>を実装していない時に<paramref name="comparer"/>がnull</exception>
            <returns><paramref name="item"/>のインデックス 無かったら次の要素のインデックスとビットが相補的な値</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.BinarySearch(System.Int32,System.Int32,`1,System.Collections.Generic.IComparer{`1})">
            <summary>
            ソートされたリストから指定した要素のインデックスを取得する
            </summary>
            <param name="index">検索開始インデックス</param>
            <param name="count">検索する要素数</param>
            <param name="item">検索する要素</param>
            <param name="comparer">検索に使用する比較子</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が0未満<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValue"/>が<see cref="T:System.IComparable`1"/>を実装していない時に<paramref name="comparer"/>がnull</exception>
            <returns><paramref name="item"/>のインデックス 無かったら次の要素のインデックスとビットが相補的な値</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Contains(`1)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始インデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Exists(System.Predicate{`1})">
            <summary>
            指定した条件に適合する要素が存在するかどうかを取得する
            </summary>
            <param name="match">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>に適合する要素が存在したらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.FindIndex(System.Predicate{`1})">
            <summary>
            指定した条件に適合する要素のうち先頭のもののインデックスを取得する
            </summary>
            <param name="match">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>に適合する要素のうち先頭のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.FindIndex(System.Int32,System.Predicate{`1})">
            <summary>
            指定した条件に適合する要素のうち先頭のもののインデックスを取得する
            </summary>
            <param name="index">検索開始インデックス</param>
            <param name="match">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
            <returns><paramref name="match"/>に適合する要素のうち先頭のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.FindIndex(System.Int32,System.Int32,System.Predicate{`1})">
            <summary>
            指定した条件に適合する要素のうち先頭のもののインデックスを取得する
            </summary>
            <param name="index">検索開始インデックス</param>
            <param name="count">検索する要素数</param>
            <param name="match">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が0未満<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
            <returns><paramref name="match"/>に適合する要素のうち先頭のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.FindLastIndex(System.Predicate{`1})">
            <summary>
            指定した条件に適合する要素のうち末尾のもののインデックスを取得する
            </summary>
            <param name="match">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns><paramref name="match"/>に適合する要素のうち末尾のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.FindLastIndex(System.Int32,System.Predicate{`1})">
            <summary>
            指定した条件に適合する要素のうち末尾のもののインデックスを取得する
            </summary>
            <param name="index">検索開始インデックス</param>
            <param name="match">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
            <returns><paramref name="match"/>に適合する要素のうち末尾のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.FindLastIndex(System.Int32,System.Int32,System.Predicate{`1})">
            <summary>
            指定した条件に適合する要素のうち末尾のもののインデックスを取得する
            </summary>
            <param name="index">検索開始インデックス</param>
            <param name="count">検索する要素数</param>
            <param name="match">検索する条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が0未満<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが0未満
            </exception>
            <returns><paramref name="match"/>に適合する要素のうち末尾のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.KeyedCollection`2.ValueList.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.GetRange(System.Int32,System.Int32)">
            <summary>
            指定した範囲の要素を持つリストを取り出す
            </summary>
            <param name="index">開始インデックス</param>
            <param name="count">取り出す要素数</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が0未満<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
            <returns>指定した範囲の要素ノリスト</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.IndexOf(`1)">
            <summary>
            指定した要素のうち先頭のもののインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>に一致する要素のうち先頭のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.IndexOf(`1,System.Int32)">
            <summary>
            指定した要素のうち先頭のもののインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <param name="index">検索開始インデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            </exception>
            <returns><paramref name="item"/>に一致する要素のうち先頭のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.IndexOf(`1,System.Int32,System.Int32)">
            <summary>
            指定した要素のうち先頭のもののインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <param name="index">検索開始インデックス</param>
            <param name="count">検索する要素数</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が0未満<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
            <returns><paramref name="item"/>に一致する要素のうち先頭のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Insert(System.Int32,`1)">
            <summary>
            指定したインデックスに要素を挿入する
            </summary>
            <param name="index">要素の挿入位置</param>
            <param name="item">挿入する要素</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            指定したインデックスに複数の要素を挿入する
            </summary>
            <param name="index"></param>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.LastIndexOf(`1)">
            <summary>
            指定した要素のうち末尾のもののインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>に一致する要素のうち末尾のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.LastIndexOf(`1,System.Int32)">
            <summary>
            指定した要素のうち末尾のもののインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <param name="index">検索開始インデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            </exception>
            <returns><paramref name="item"/>に一致する要素のうち末尾のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.LastIndexOf(`1,System.Int32,System.Int32)">
            <summary>
            指定した要素のうち末尾のもののインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <param name="index">検索開始インデックス</param>
            <param name="count">検索する要素数</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>より大きい<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが0未満
            </exception>
            <returns><paramref name="item"/>に一致する要素のうち末尾のもののインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Remove(`1)">
            <summary>
            指定した要素を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            指定した範囲の要素を削除する
            </summary>
            <param name="index">削除開始インデックス</param>
            <param name="count">削除する要素数</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が0未満<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Sort">
            <summary>
            ソートを行う
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Sort(System.Collections.Generic.IComparer{`1})">
            <summary>
            ソートを行う
            </summary>
            <param name="comparer">使用する比較子</param>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValue"/>が<see cref="T:System.IComparable`1"/>を実装していない時に<paramref name="comparer"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Sort(System.Comparison{`1})">
            <summary>
            ソートを行う
            </summary>
            <param name="comparison">使用する比較関数</param>
            <exception cref="T:System.ArgumentException"><paramref name="comparison"/>に同じオブジェクトを与えた時に0を返さない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
            ソートを行う
            </summary>
            <param name="index">ソートの開始インデックス</param>
            <param name="count">ソートを行う要素数</param>
            <param name="comparer">使用する比較子</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="index"/>が0未満<br/>
            - <paramref name="index"/>が<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上<br/>
            - <paramref name="count"/>が0未満<br/>
            - <paramref name="index"/>と<paramref name="count"/>を加味した最終インデックスが<see cref="P:fslib3.Collections.KeyedCollection`2.ValueList.Count"/>以上
            </exception>
            <exception cref="T:System.InvalidOperationException"><typeparamref name="TValue"/>が<see cref="T:System.IComparable`1"/>を実装していない時に<paramref name="comparer"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.ToArray">
            <summary>
            配列に変換する
            </summary>
            <returns>要素のコピーを格納する配列の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.TrueForAll(System.Predicate{`1})">
            <summary>
            全ての要素が指定した条件を満たすかどうかを取得する
            </summary>
            <param name="match">検索する要素の条件</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/>がnull</exception>
            <returns>全ての要素が<paramref name="match"/>に適合していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.KeyedCollection`2.ValueList.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.KeyedCollection`2.ValueList.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.KeyedCollection`2.ValueList.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.NormalCollection`1">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/>の実装
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.NormalCollection`1.Capacity">
            <summary>
            要素を格納できる容量を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が<see cref="P:fslib3.Collections.NormalCollection`1.Count"/>未満</exception>
        </member>
        <member name="P:fslib3.Collections.NormalCollection`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.#ctor">
            <summary>
            既定の容量を持つ<see cref="T:fslib3.Collections.NormalCollection`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.#ctor(System.Int32)">
            <summary>
            指定した容量を持つ<see cref="T:fslib3.Collections.NormalCollection`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したコレクションのコピーを格納する<see cref="T:fslib3.Collections.NormalCollection`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">コピーする要素を格納するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.Add(`0)">
            <summary>
            指定した要素を追加する
            </summary>
            <param name="item">追加する要素</param>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib3.Collections.NormalCollection`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.IsSingle(`0)">
            <summary>
            指定した要素の個数が1つだけかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が単一であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.RemoveAll(`0)">
            <summary>
            指定した要素をすべて削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns>削除した<paramref name="item"/>の個数</returns>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.RemoveFirst(`0)">
            <summary>
            指定した要素のうち先頭の物を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.RemoveLast(`0)">
            <summary>
            指定した要素のうち末尾の物を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.ToArray">
            <summary>
            このインスタンスと同じ要素を格納した配列を返す
            </summary>
            <returns>このインスタンスと同じ要素を格納した配列</returns>
        </member>
        <member name="T:fslib3.Collections.NormalCollection`1.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.NormalCollection`1.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.NormalCollection`1.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.OrderedDictionary`2">
            <summary>
            インデックス操作が可能なディクショナリのクラス
            </summary>
            <typeparam name="TKey">格納されるキーの型</typeparam>
            <typeparam name="TValue">格納される値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.Keys">
            <summary>
            キーのリストを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.Values">
            <summary>
            値のリストを取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.#ctor">
            <summary>
            既定の容量と比較子を備えた<see cref="T:fslib3.Collections.OrderedDictionary`2"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた<see cref="T:fslib3.Collections.OrderedDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            既定の容量と指定した比較子を備えた<see cref="T:fslib3.Collections.OrderedDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer"><typeparamref name="TKey"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            指定した容量と比較子を備えた<see cref="T:fslib3.Collections.OrderedDictionary`2"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer"><typeparamref name="TKey"/>の等価性を比較する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            指定したキーを持つ値を取得または設定する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">値を取得する時<paramref name="key"/>が存在しない</exception>
            <returns><paramref name="key"/>を持つ値</returns>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            指定したインデックスの値を取得または設定する
            </summary>
            <param name="index">検索するインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.OrderedDictionary`2.Count"/>以上</exception>
            <returns><paramref name="index"/>に対応した値</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            指定したキーと値のペアを末尾に追加する
            </summary>
            <param name="key">追加するキー</param>
            <param name="value">追加する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/>が既に登録されている</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            指定したキーが格納されているかどうかを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ContainsValue(`1)">
            <summary>
            指定した値が格納されているかどうかを取得する
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.OrderedDictionary`2.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            指定したキーのインデックスを取得する
            </summary>
            <param name="key">検索するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.IndexOfValue(`1)">
            <summary>
            指定した値のインデックスを取得する
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            指定したインデックスにキーと値のペアを挿入する
            </summary>
            <param name="index">挿入位置</param>
            <param name="key">挿入するキー</param>
            <param name="value">挿入する値</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/>が既に存在する</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.OrderedDictionary`2.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            指定したキーを持つ要素を削除する
            </summary>
            <param name="key">削除する要素のキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="key"/>を持つ値を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <param name="index">削除する要素のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            指定したキーを持つ値を取得する
            </summary>
            <param name="key">検索するキー</param>
            <param name="value"><paramref name="key"/>と適合する値 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/>がnull</exception>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.OrderedDictionary`2.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.OrderedDictionary`2.KeyList">
            <summary>
            キーを格納するリストのクラス
            </summary>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.KeyList.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.KeyList.#ctor(fslib3.Collections.OrderedDictionary{`0,`1})">
            <summary>
            <see cref="T:fslib3.Collections.OrderedDictionary`2.KeyList"/>の新しいインスタンスを生成する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
            <param name="dictionary">使用する<see cref="T:fslib3.Collections.OrderedDictionary`2"/>のインスタンス</param>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.KeyList.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得する
            </summary>
            <param name="index">検索するインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.OrderedDictionary`2.KeyList.Count"/>以上</exception>
            <returns><paramref name="index"/>に対応する要素</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.KeyList.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.KeyList.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始インデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.KeyList.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.OrderedDictionary`2.KeyList.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.KeyList.IndexOf(`0)">
            <summary>
            指定した要素のインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib3.Collections.OrderedDictionary`2.KeyList.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.KeyList.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.KeyList.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.KeyList.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.OrderedDictionary`2.ValueList">
            <summary>
            値を格納するリストのクラス
            </summary>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.ValueList.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ValueList.#ctor(fslib3.Collections.OrderedDictionary{`0,`1})">
            <summary>
            <see cref="T:fslib3.Collections.OrderedDictionary`2.ValueList"/>の新しいインスタンスを生成する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
            <param name="dictionary">使用する<see cref="T:fslib3.Collections.OrderedDictionary`2"/>のインスタンス</param>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.ValueList.Item(System.Int32)">
            <summary>
            指定したインデックスの要素を取得する
            </summary>
            <param name="index">検索するインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:fslib3.Collections.OrderedDictionary`2.ValueList.Count"/>以上</exception>
            <returns><paramref name="index"/>に対応する要素</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ValueList.Contains(`1)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ValueList.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始インデックス</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ValueList.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Collections.OrderedDictionary`2.ValueList.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ValueList.IndexOf(`1)">
            <summary>
            指定した要素のインデックスを取得する
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>のインデックス 無かったら-1</returns>
        </member>
        <member name="T:fslib3.Collections.OrderedDictionary`2.ValueList.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.OrderedDictionary`2.ValueList.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ValueList.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.OrderedDictionary`2.ValueList.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.PriorityQueue`1">
            <summary>
            優先度付きキューのクラス
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.PriorityQueue`1.Comparer">
            <summary>
            使用する比較子を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.PriorityQueue`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.#ctor">
            <summary>
            既定の容量と比較子を備えた空の<see cref="T:fslib3.Collections.PriorityQueue`1"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            指定した容量と既定の比較子を備えた空の<see cref="T:fslib3.Collections.PriorityQueue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            既定の容量と比指定した較子を備えた空の<see cref="T:fslib3.Collections.PriorityQueue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="comparer">使用する比較子 nullの場合は既定の物を使用する</param>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            指定した容量と比較子を備えた空の<see cref="T:fslib3.Collections.PriorityQueue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="capacity">設定する容量</param>
            <param name="comparer">使用する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定した要素のコピーと既定の比較子を備えた<see cref="T:fslib3.Collections.PriorityQueue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="colleciton">要素をコピーするコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="colleciton"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            指定した要素のコピーと比較子を備えた<see cref="T:fslib3.Collections.PriorityQueue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="colleciton">要素をコピーするコレクション</param>
            <param name="comparer">使用する比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="colleciton"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.Clear">
            <summary>
            全ての要素を削除する
            </summary>
            <remarks>O(n)</remarks>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
            <remarks>O(n)</remarks>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーされる要素の個数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満若しくは<paramref name="count"/>が0未満または<see cref="P:fslib3.Collections.PriorityQueue`1.Count"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.Dequeue">
            <summary>
            最も優先度の高い要素を取り出す
            </summary>
            <exception cref="T:System.InvalidOperationException">このコレクションが空</exception>
            <returns>最も優先度の高い要素</returns>
            <remarks>O(log(n))</remarks>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.Enqueue(`0)">
            <summary>
            指定した要素を追加する
            </summary>
            <param name="item">追加する要素</param>
            <remarks>O(log(n))</remarks>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:fslib3.Collections.PriorityQueue`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.Peek">
            <summary>
            最も優先度の高い要素を削除せずに取得する
            </summary>
            <exception cref="T:System.InvalidOperationException">このコレクションが空</exception>
            <returns>最も優先度の高い要素</returns>
            <remarks>O(1)</remarks>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.TrimExcess">
            <summary>
            要素数が容量の90%よりも小さい場合，容量を要素数にまで縮める
            </summary>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.TryDequeue(`0@)">
            <summary>
            最も優先度の高い要素を取り出す
            </summary>
            <param name="result">最も優先度の高い要素 取り出せなかったら既定値</param>
            <returns><paramref name="result"/>を取り出せたらtrue，それ以外でfalse</returns>
            <remarks>O(log(n))</remarks>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.TryPeek(`0@)">
            <summary>
            最も優先度の高い要素を削除せずに取得する
            </summary>
            <param name="result">最も優先度の高い要素 取り出せなかったら既定値</param>
            <returns><paramref name="result"/>を取り出せたらtrue，それ以外false</returns>
            <remarks>O(1)</remarks>
        </member>
        <member name="T:fslib3.Collections.PriorityQueue`1.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Collections.PriorityQueue`1.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Collections.PriorityQueue`1.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3">
            <summary>
            読み取り専用の<see cref="T:fslib3.Collections.IDoubleKeyDictionary`3"/>のクラス
            </summary>
            <typeparam name="TKey1">格納するキーの型1</typeparam>
            <typeparam name="TKey2">格納するキーの型2</typeparam>
            <typeparam name="TValue">格納する値の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Keys1">
            <summary>
            <typeparamref name="TKey1"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Keys2">
            <summary>
            <typeparamref name="TKey2"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Values">
            <summary>
            <typeparamref name="TValue"/>型の値を格納するコレクションを取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.#ctor(fslib3.Collections.IDoubleKeyDictionary{`0,`1,`2})">
            <summary>
            指定した<see cref="T:fslib3.Collections.IDoubleKeyDictionary`3"/>を用いて<see cref="T:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <param name="dictionary">使用する<see cref="T:fslib3.Collections.IDoubleKeyDictionary`3"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Item(`0,`1)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key1"/>と<paramref name="key2"/>の組み合わせを持つ値を取得できなかった</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>を持つ値</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ContainsKeyPair(`0,`1)">
            <summary>
            指定したキーの組み合わせが格納されているかどうかを返す
            </summary>
            <param name="key1">検索するキー1</param>
            <param name="key2">検索するキー2</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="key1"/>と<paramref name="key2"/>の組み合わせが格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.GetEnumerator">
            <summary>
            列挙をサポートする列挙子を返す
            </summary>
            <returns>列挙をサポートする列挙子</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.TryGetValue(`0,`1,`2@)">
            <summary>
            指定したキーの組み合わせを持つ値を取得する
            </summary>
            <param name="key1">検索する値のキー1</param>
            <param name="key2">検索する値のキー2</param>
            <param name="value"><paramref name="key1"/>と<paramref name="key2"/>を持つ値 無かったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key1"/>または<paramref name="key2"/>がnull</exception>
            <returns><paramref name="value"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key1Collection">
            <summary>
            <typeparamref name="TKey1"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key1Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key1Collection.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key1Collection.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key1Collection.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key1Collection.GetEnumerator">
            <summary>
            列挙をサポートする列挙子を返す
            </summary>
            <returns>列挙をサポートする列挙子</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key1Collection.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="T:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key2Collection">
            <summary>
            <typeparamref name="TKey2"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key2Collection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key2Collection.Contains(`1)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key2Collection.CopyTo(`1[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key2Collection.CopyTo(`1[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key2Collection.GetEnumerator">
            <summary>
            列挙をサポートする列挙子を返す
            </summary>
            <returns>列挙をサポートする列挙子</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.Key2Collection.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="T:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ValueCollection">
            <summary>
            <typeparamref name="TValue"/>を格納するコレクション
            </summary>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ValueCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ValueCollection.Contains(`2)">
            <summary>
            指定した要素が格納されているかどうかを返す
            </summary>
            <param name="item">検索する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/>がnull</exception>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ValueCollection.CopyTo(`2[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ValueCollection.CopyTo(`2[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ValueCollection.GetEnumerator">
            <summary>
            列挙をサポートする列挙子を返す
            </summary>
            <returns>列挙をサポートする列挙子</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyDoubleKeyDictionary`3.ValueCollection.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="T:fslib3.Collections.ReadOnlyHashSet`1">
            <summary>
            <see cref="T:System.Collections.Generic.HashSet`1"/>を内部参照に持つ読み取り専用のコレクションのクラス
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyHashSet`1.Comparer">
            <summary>
            内部の<see cref="T:System.Collections.Generic.HashSet`1"/>で使用される等価比較子を取得する
            </summary>
        </member>
        <member name="P:fslib3.Collections.ReadOnlyHashSet`1.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            <see cref="T:System.Collections.Generic.HashSet`1"/>を用いて<see cref="T:fslib3.Collections.ReadOnlyHashSet`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="set">使用する<see cref="T:System.Collections.Generic.HashSet`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.Contains(`0)">
            <summary>
            指定した要素が格納されているかどうかを取得または設定する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.CopyTo(`0[])">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <param name="count">コピーされる要素数</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>または<paramref name="count"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.GetEnumerator">
            <summary>
            列挙をサポートする構造体を返す
            </summary>
            <returns><see cref="T:System.Collections.Generic.HashSet`1.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            このインスタンスが指定したコレクションの真部分集合かどうか判定する
            </summary>
            <param name="other">このインスタンスと比較するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/>がnull</exception>
            <returns>このインスタンスが<paramref name="other"/>の真部分集合であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            このインスタンスが指定したコレクションの真上位集合かどうか判定する
            </summary>
            <param name="other">このインスタンスと比較するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/>がnull</exception>
            <returns>このインスタンスが<paramref name="other"/>の真上位集合であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            このインスタンスが指定したコレクションの部分集合かどうか判定する
            </summary>
            <param name="other">このインスタンスと比較するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/>がnull</exception>
            <returns>このインスタンスが<paramref name="other"/>の部分集合であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            このインスタンスが指定したコレクションの上位集合かどうか判定する
            </summary>
            <param name="other">このインスタンスと比較するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/>がnull</exception>
            <returns>このインスタンスが<paramref name="other"/>の上位集合であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したコレクションと共有する要素があるかどうかを判定する
            </summary>
            <param name="other">このインスタンスと比較するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/>がnull</exception>
            <returns>このインスタンスと<paramref name="other"/>との間に共通の要素が1つでもあったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            指定したコレクションと同じ要素を格納しているかどうかを判定する
            </summary>
            <param name="other">このインスタンスと比較するコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/>がnull</exception>
            <returns>このインスタンスが<paramref name="other"/>と同じ要素を格納していたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.ToArray">
            <summary>
            要素のコピーを持つ配列を返す
            </summary>
            <returns>要素のコピーを持つ配列</returns>
        </member>
        <member name="M:fslib3.Collections.ReadOnlyHashSet`1.TryGetValue(`0,`0@)">
            <summary>
            指定した値を検索し，このインスタンス内に等しい値が格納されていた場合その値を返す
            </summary>
            <param name="equalValue">検索する値</param>
            <param name="actualValue">このインスタンスに格納されている，<paramref name="equalValue"/>と等しい値 無い場合は既定値</param>
            <returns><paramref name="actualValue"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.CompareHelper">
            <summary>
            オブジェクトの比較をサポートするクラス
            </summary>
        </member>
        <member name="M:fslib3.CompareHelper.IsCompatibleValue``1(System.Object)">
            <summary>
            指定したオブジェクトが特定のジェネリック型に適合するかどうかを検証する
            </summary>
            <typeparam name="T">検証する型</typeparam>
            <param name="value"><typeparamref name="T"/>として適切か検証する値</param>
            <returns><paramref name="value"/>が<typeparamref name="T"/>として適切な値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.CompareHelper.IsCompatibleValue``1(System.Object,``0@)">
            <summary>
            指定したオブジェクトが特定のジェネリック型に適合するかどうかを検証する
            </summary>
            <typeparam name="T">検証する型</typeparam>
            <param name="value"><typeparamref name="T"/>として適切か検証する値</param>
            <param name="result"><typeparamref name="T"/>としてのキャスト結果 <paramref name="value"/>が<typeparamref name="T"/>として適切ならキャストされた値，それ以外で既定値</param>
            <returns><paramref name="value"/>が<typeparamref name="T"/>として適切な値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.CompareHelper.IsCompatibleUsableValue``1(System.Object)">
            <summary>
            指定したオブジェクトが特定のジェネリック型に適合するかどうかを検証する
            </summary>
            <typeparam name="T">検証する型</typeparam>
            <param name="value"><typeparamref name="T"/>として適切かどうか検証する値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <returns><paramref name="value"/>が<typeparamref name="T"/>として適切な値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.CompareHelper.IsCompatibleUsableValue``1(System.Object,``0@)">
            <summary>
            指定したオブジェクトが特定のジェネリック型に適合するかどうかを検証する
            </summary>
            <typeparam name="T">検証する型</typeparam>
            <param name="value"><typeparamref name="T"/>として適切かどうか検証する値</param>
            <param name="result"><typeparamref name="T"/>としてのキャスト結果 <paramref name="value"/>が<typeparamref name="T"/>として適切ならキャストされた値，それ以外で既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <returns><paramref name="value"/>が<typeparamref name="T"/>として適切な値であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Complex">
            <summary>
            複素数を表す構造体
            </summary>
        </member>
        <member name="P:fslib3.Complex.Conjugation">
            <summary>
            共役な値を取得する
            </summary>
        </member>
        <member name="P:fslib3.Complex.Imaginary">
            <summary>
            虚部を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Complex.Real">
            <summary>
            実部を取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.Complex.#ctor(System.Double)">
            <summary>
            指定した実部を備えた<see cref="T:fslib3.Complex"/>の新しいインスタンスを生成する
            </summary>
            <param name="real">実部</param>
        </member>
        <member name="M:fslib3.Complex.#ctor(System.Double,System.Double)">
            <summary>
            指定した実部と虚部を備えた<see cref="T:fslib3.Complex"/>の新しいインスタンスを生成する
            </summary>
            <param name="real">実部</param>
            <param name="imaginary">虚部</param>
        </member>
        <member name="M:fslib3.Complex.Equals(System.Double)">
            <summary>
            指定した実数値と実部の等価性を検証する
            </summary>
            <param name="real">等価性を検証する実数値</param>
            <returns><paramref name="real"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Complex.Equals(fslib3.Complex)">
            <summary>
            指定した<see cref="T:fslib3.Complex"/>のインスタンスとの等価性を検証する
            </summary>
            <param name="other">等価性を検証する<see cref="T:fslib3.Complex"/>のインスタンス</param>
            <returns><paramref name="other"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Complex.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Complex.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Complex.ToString">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Complex.ToString(System.String)">
            <summary>
            指定したフォーマットを使用して文字列に変換する
            </summary>
            <param name="format">使用するフォーマット</param>
            <returns>フォーマットされた文字列</returns>
        </member>
        <member name="M:fslib3.Complex.ToString(System.IFormatProvider)">
            <summary>
            指定したフォーマットを使用して文字列に変換する
            </summary>
            <param name="provider">使用するフォーマッター</param>
            <returns>フォーマットされた文字列</returns>
        </member>
        <member name="M:fslib3.Complex.ToString(System.String,System.IFormatProvider)">
            <summary>
            指定したフォーマットを使用して文字列に変換する
            </summary>
            <param name="format">使用するフォーマット</param>
            <param name="provider">使用するフォーマッター</param>
            <returns>フォーマットされた文字列</returns>
        </member>
        <member name="T:fslib3.Data.ClampedInt32">
            <summary>
            特定の範囲に収まる<see cref="T:System.Int32"/>を表すクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedInt32.MaxDefault">
            <inheritdoc/>
        </member>
        <member name="P:fslib3.Data.ClampedInt32.MinDefault">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedInt32.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ClampedInt32"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.ClampedInt32.#ctor(System.Int32)">
            <summary>
            <see cref="T:fslib3.Data.ClampedInt32"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.ClampedInt32.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedInt32.#ctor(fslib3.Data.ClampedInt32)">
            <summary>
            <see cref="T:fslib3.Data.ClampedInt32"/>のクローンを生成する
            </summary>
            <param name="cloned">クローンに使用する<see cref="T:fslib3.Data.ClampedInt32"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloned"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.ClampedInt32.Clone">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.ClampedUInt32">
            <summary>
            特定の範囲に収まる<see cref="T:System.UInt32"/>を表すクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedUInt32.MaxDefault">
            <inheritdoc/>
        </member>
        <member name="P:fslib3.Data.ClampedUInt32.MinDefault">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedUInt32.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ClampedUInt32"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.ClampedUInt32.#ctor(System.UInt32)">
            <summary>
            <see cref="T:fslib3.Data.ClampedUInt32"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.ClampedUInt32.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedUInt32.#ctor(fslib3.Data.ClampedUInt32)">
            <summary>
            <see cref="T:fslib3.Data.ClampedUInt32"/>のクローンを生成する
            </summary>
            <param name="cloned">クローンに使用する<see cref="T:fslib3.Data.ClampedUInt32"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloned"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.ClampedUInt32.Clone">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.ClampedInt64">
            <summary>
            特定の範囲に収まる<see cref="T:System.Int64"/>を表すクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedInt64.MaxDefault">
            <inheritdoc/>
        </member>
        <member name="P:fslib3.Data.ClampedInt64.MinDefault">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedInt64.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ClampedInt64"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.ClampedInt64.#ctor(System.Int64)">
            <summary>
            <see cref="T:fslib3.Data.ClampedInt64"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.ClampedInt64.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedInt64.#ctor(fslib3.Data.ClampedInt64)">
            <summary>
            <see cref="T:fslib3.Data.ClampedInt64"/>のクローンを生成する
            </summary>
            <param name="cloned">クローンに使用する<see cref="T:fslib3.Data.ClampedInt64"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloned"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.ClampedInt64.Clone">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.ClampedUInt64">
            <summary>
            特定の範囲に収まる<see cref="T:System.UInt64"/>を表すクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedUInt64.MaxDefault">
            <inheritdoc/>
        </member>
        <member name="P:fslib3.Data.ClampedUInt64.MinDefault">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedUInt64.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ClampedUInt64"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.ClampedUInt64.#ctor(System.UInt64)">
            <summary>
            <see cref="T:fslib3.Data.ClampedUInt64"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.ClampedUInt64.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedUInt64.#ctor(fslib3.Data.ClampedUInt64)">
            <summary>
            <see cref="T:fslib3.Data.ClampedUInt64"/>のクローンを生成する
            </summary>
            <param name="cloned">クローンに使用する<see cref="T:fslib3.Data.ClampedUInt64"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloned"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.ClampedUInt64.Clone">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.ClampedSingle">
            <summary>
            特定の範囲に収まる<see cref="T:System.Single"/>を表すクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedSingle.MaxDefault">
            <inheritdoc/>
        </member>
        <member name="P:fslib3.Data.ClampedSingle.MinDefault">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedSingle.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ClampedSingle"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.ClampedSingle.#ctor(System.Single)">
            <summary>
            <see cref="T:fslib3.Data.ClampedSingle"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.ClampedSingle.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedSingle.#ctor(fslib3.Data.ClampedSingle)">
            <summary>
            <see cref="T:fslib3.Data.ClampedSingle"/>のクローンを生成する
            </summary>
            <param name="cloned">クローンに使用する<see cref="T:fslib3.Data.ClampedSingle"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloned"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.ClampedSingle.Clone">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.ClampedDouble">
            <summary>
            特定の範囲に収まる<see cref="T:System.Double"/>を表すクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedDouble.MaxDefault">
            <inheritdoc/>
        </member>
        <member name="P:fslib3.Data.ClampedDouble.MinDefault">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedDouble.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ClampedDouble"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.ClampedDouble.#ctor(System.Double)">
            <summary>
            <see cref="T:fslib3.Data.ClampedDouble"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.ClampedDouble.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedDouble.#ctor(fslib3.Data.ClampedDouble)">
            <summary>
            <see cref="T:fslib3.Data.ClampedDouble"/>のクローンを生成する
            </summary>
            <param name="cloned">クローンに使用する<see cref="T:fslib3.Data.ClampedDouble"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloned"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.ClampedDouble.Clone">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.ClampedValue`1">
            <summary>
            特定の範囲に収まる値の基底クラス
            </summary>
            <typeparam name="T">格納する値の型</typeparam>
        </member>
        <member name="P:fslib3.Data.ClampedValue`1.Max">
            <summary>
            最大値を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が<see cref="P:fslib3.Data.ClampedValue`1.Min"/>より小さい</exception>
        </member>
        <member name="P:fslib3.Data.ClampedValue`1.Min">
            <summary>
            最小値を取得または設定する
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">設定しようとした値が<see cref="P:fslib3.Data.ClampedValue`1.Max"/>より大きい</exception>
        </member>
        <member name="P:fslib3.Data.ClampedValue`1.Value">
            <summary>
            格納されている値を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedValue`1.MaxDefault">
            <summary>
            <see cref="P:fslib3.Data.ClampedValue`1.Max"/>の既定の値を取得する
            </summary>
        </member>
        <member name="P:fslib3.Data.ClampedValue`1.MinDefault">
            <summary>
            <see cref="P:fslib3.Data.ClampedValue`1.Min"/>の既定の値を取得する
            </summary>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.Data.ClampedValue`1.MaxDefault"/>と<see cref="P:fslib3.Data.ClampedValue`1.MinDefault"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.#ctor(`0,`0,`0)">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.#ctor(fslib3.Data.ClampedValue{`0})">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>のクローンを生成する
            </summary>
            <param name="cloned">クローンに使用する<see cref="T:fslib3.Data.ClampedValue`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cloned"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.Compare(fslib3.Data.ClampedValue{`0},fslib3.Data.ClampedValue{`0})">
            <summary>
            2つの<see cref="T:fslib3.Data.ClampedValue`1"/>の並び順を求める
            </summary>
            <param name="x">比較するオブジェクト1</param>
            <param name="y">比較するオブジェクト2</param>
            <returns><paramref name="x"/>と<paramref name="y"/>の比較結果</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.Create(`0,`0,`0)">
            <summary>
            指定した値と最小値，最大値から<see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">値</param>
            <param name="min">最小値</param>
            <param name="max">最大値</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="min"/>と<paramref name="max"/>の大小関係が無効</exception>
            <returns><see cref="T:fslib3.Data.ClampedValue`1"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.Equals(fslib3.Data.ClampedValue{`0},fslib3.Data.ClampedValue{`0})">
            <summary>
            2つの<see cref="T:fslib3.Data.ClampedValue`1"/>の等価性を検証する
            </summary>
            <param name="x">等価性を検証するオブジェクト1</param>
            <param name="y">等価性をするオブジェクト2</param>
            <returns><paramref name="x"/>と<paramref name="y"/>の等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.Clamp(`0)">
            <summary>
            値を丸める
            </summary>
            <param name="src">丸める値</param>
            <returns><see cref="P:fslib3.Data.ClampedValue`1.Min"/>と<see cref="P:fslib3.Data.ClampedValue`1.Max"/>の間に丸められた値</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.Clone">
            <summary>
            インスタンスのクローンを生成する
            </summary>
            <returns>このインスタンスのクローン</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.CompareTo(`0)">
            <summary>
            <typeparamref name="T"/>との並び順を検証する
            </summary>
            <param name="value">並び順を検証する<typeparamref name="T"/>のインスタンス</param>
            <returns><paramref name="value"/>との並び順</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.CompareTo(fslib3.Data.ClampedValue{`0})">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>との並び順を検証する
            </summary>
            <param name="other">並び順を検証する<see cref="T:fslib3.Data.ClampedValue`1"/>のインスタンス</param>
            <returns><paramref name="other"/>との並び順</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.Equals(fslib3.Data.ClampedValue{`0})">
            <summary>
            <see cref="T:fslib3.Data.ClampedValue`1"/>との等価性を検証する
            </summary>
            <param name="other">等価性を検証する<see cref="T:fslib3.Data.ClampedValue`1"/>のインスタンス</param>
            <returns><paramref name="other"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ClampedValue`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.StringBox">
            <summary>
            文字列を格納・変換できるクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.StringBox.Value">
            <summary>
            格納されている文字列を取得または設定する
            </summary>
            <remarks>nullが格納されている場合は<see cref="F:System.String.Empty"/>が返される</remarks>
        </member>
        <member name="M:fslib3.Data.StringBox.#ctor">
            <summary>
            <see cref="T:fslib3.Data.StringBox"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.StringBox.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.Data.StringBox"/>の新しいインスタンスを生成する
            </summary>
            <param name="value">設定する文字列</param>
        </member>
        <member name="M:fslib3.Data.StringBox.Clone">
            <summary>
            このインスタンスを複製する
            </summary>
            <returns>このインスタンスの複製</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.CompareTo(fslib3.Data.StringBox)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.StringBox.Equals(fslib3.Data.StringBox)">
            <summary>
            <see cref="T:fslib3.Data.StringBox"/>のインスタンスとの等価性を判定する
            </summary>
            <param name="other">等価性を検証する<see cref="T:fslib3.Data.StringBox"/>のインスタンス</param>
            <returns><paramref name="other"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.StringBox.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.Int32)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.UInt32)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.Int64)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.UInt64)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.Single)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.Double)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.Decimal)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.Char)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.SetValue(System.Boolean)">
            <summary>
            値を設定する
            </summary>
            <param name="value">設定する値</param>
        </member>
        <member name="M:fslib3.Data.StringBox.ToString">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetInt8(System.SByte@)">
            <summary>
            <see cref="T:System.SByte"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.SByte"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetInt16(System.Int16@)">
            <summary>
            <see cref="T:System.Int16"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Int16"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetInt32(System.Int32@)">
            <summary>
            <see cref="T:System.Int32"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Int32"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetInt64(System.Int64@)">
            <summary>
            <see cref="T:System.Int64"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Int64"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetUInt8(System.Byte@)">
            <summary>
            <see cref="T:System.Byte"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Byte"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetUInt16(System.UInt16@)">
            <summary>
            <see cref="T:System.UInt16"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.UInt16"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetUInt32(System.UInt32@)">
            <summary>
            <see cref="T:System.UInt32"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.UInt32"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetUInt64(System.UInt64@)">
            <summary>
            <see cref="T:System.UInt64"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.UInt64"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetSingle(System.Single@)">
            <summary>
            <see cref="T:System.Single"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Single"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetDouble(System.Double@)">
            <summary>
            <see cref="T:System.Double"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Double"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetDecimal(System.Decimal@)">
            <summary>
            <see cref="T:System.Decimal"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Decimal"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetBoolean(System.Boolean@)">
            <summary>
            <see cref="T:System.Boolean"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Boolean"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.StringBox.TryGetChar(System.Char@)">
            <summary>
            <see cref="P:fslib3.Data.StringBox.Value"/>が1文字のみだった場合<see cref="T:System.Char"/>に変換する
            </summary>
            <param name="value">変換された<see cref="T:System.Char"/>の値 変換できなかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Data.TableData">
            <summary>
            表形式のデータのクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.TableData.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Data.TableData.Height">
            <summary>
            表の縦のサイズを取得する
            </summary>
        </member>
        <member name="P:fslib3.Data.TableData.Width">
            <summary>
            表の横のサイズを取得する
            </summary>
        </member>
        <member name="M:fslib3.Data.TableData.#ctor">
            <summary>
            <see cref="T:fslib3.Data.TableData"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.TableData.#ctor(fslib3.Data.StringBox[][])">
            <summary>
            <see cref="T:fslib3.Data.TableData"/>の新しいインスタンスを生成する
            </summary>
            <param name="array">コピーする要素を格納した配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.TableData.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{fslib3.Data.StringBox}})">
            <summary>
            <see cref="T:fslib3.Data.TableData"/>の新しいインスタンスを生成する
            </summary>
            <param name="collection">コピーする要素を格納したコレクション</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.TableData.#ctor(fslib3.Data.StringBox[0:,0:])">
            <summary>
            <see cref="T:fslib3.Data.TableData"/>の新しいインスタンスを生成する
            </summary>
            <param name="array">コピーする要素を格納した配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="P:fslib3.Data.TableData.Item(System.Int32,System.Int32)">
            <summary>
            指定した場所の要素を取得または設定する
            </summary>
            <param name="x">横のインデックス</param>
            <param name="y">縦のインデックス</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または表のサイズ以上</exception>
            <returns>指定した場所の要素</returns>
        </member>
        <member name="M:fslib3.Data.TableData.Append(fslib3.Data.StringBox)">
            <summary>
            一番下の行の末尾に要素を追加する
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:fslib3.Data.TableData.Append(System.Int32,fslib3.Data.StringBox)">
            <summary>
            指定した行の末尾に要素を追加する
            </summary>
            <param name="y">要素を追加する行</param>
            <param name="value">追加する要素</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/>が0未満または<see cref="P:fslib3.Data.TableData.Height"/>以上</exception>
        </member>
        <member name="M:fslib3.Data.TableData.AppendRow(fslib3.Data.StringBox[])">
            <summary>
            新しい行を追加して値を設定する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <param name="collection">追加する要素</param>
        </member>
        <member name="M:fslib3.Data.TableData.AppendRow(System.Collections.Generic.IEnumerable{fslib3.Data.StringBox})">
            <summary>
            新しい行を追加して値を設定する
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <param name="collection">追加する要素</param>
        </member>
        <member name="M:fslib3.Data.TableData.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Data.TableData.Clone">
            <summary>
            このインスタンスのコピーを生成する
            </summary>
            <returns>このインスタンスのコピー</returns>
        </member>
        <member name="M:fslib3.Data.TableData.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Data.TableData.Enumerator"/>の新しいインスタンスを生成する</returns>
        </member>
        <member name="M:fslib3.Data.TableData.GetRow(System.Int32)">
            <summary>
            指定した行を取得する
            </summary>
            <param name="y">検索する行番号</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/>が0未満または<see cref="P:fslib3.Data.TableData.Height"/>以上</exception>
            <returns><paramref name="y"/>に対応する行のリスト</returns>
        </member>
        <member name="M:fslib3.Data.TableData.Insert(System.Int32,System.Int32,fslib3.Data.StringBox)">
            <summary>
            指定した行内の場所に要素を挿入する
            </summary>
            <param name="x">挿入する横の位置</param>
            <param name="y">挿入する縦の位置</param>
            <param name="value">挿入する要素</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または表のサイズ以上</exception>
        </member>
        <member name="M:fslib3.Data.TableData.InsertRow(System.Int32,fslib3.Data.StringBox[])">
            <summary>
            指定した場所に行を挿入する
            </summary>
            <param name="y">挿入する位置</param>
            <param name="collection">挿入する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/>が0未満または<see cref="P:fslib3.Data.TableData.Height"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Data.TableData.InsertRow(System.Int32,System.Collections.Generic.IEnumerable{fslib3.Data.StringBox})">
            <summary>
            指定した場所に行を挿入する
            </summary>
            <param name="y">挿入する位置</param>
            <param name="collection">挿入する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/>が0未満または<see cref="P:fslib3.Data.TableData.Height"/>より大きい</exception>
        </member>
        <member name="M:fslib3.Data.TableData.RemoveAt(System.Int32,System.Int32)">
            <summary>
            指定した場所の要素を削除する
            </summary>
            <param name="x">削除する要素の横の位置</param>
            <param name="y">削除する要素の縦の位置</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または表のサイズ以上</exception>
        </member>
        <member name="M:fslib3.Data.TableData.RemoveAt(System.Int32,System.Int32,fslib3.Data.StringBox@)">
            <summary>
            指定した場所の要素を削除する
            </summary>
            <param name="x">削除する要素の横の位置</param>
            <param name="y">削除する要素の縦の位置</param>
            <param name="removed">削除された要素</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/>または<paramref name="y"/>が0未満または表のサイズ以上</exception>
        </member>
        <member name="M:fslib3.Data.TableData.RemoveLine(System.Int32)">
            <summary>
            指定した行を削除する
            </summary>
            <param name="y">削除する行</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/>が0未満または<see cref="P:fslib3.Data.TableData.Height"/>以上</exception>
        </member>
        <member name="M:fslib3.Data.TableData.Sort(System.Collections.Generic.IComparer{System.Collections.Generic.IList{fslib3.Data.StringBox}})">
            <summary>
            ソートを行う
            </summary>
            <param name="comparer">使用する比較子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/>がnull</exception>
        </member>
        <member name="M:fslib3.Data.TableData.ToArray">
            <summary>
            配列に変換する
            </summary>
            <returns>各行の要素のコピーを格納した配列</returns>
        </member>
        <member name="T:fslib3.Data.TableData.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Data.TableData.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Data.TableData.Enumerator.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Data.TableData.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <exception cref="T:System.InvalidOperationException">列挙中にコレクションが変更された</exception>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Data.ValueRange">
            <summary>
            値の範囲を表す構造体
            </summary>
        </member>
        <member name="P:fslib3.Data.ValueRange.Count">
            <summary>
            個数を取得する
            </summary>
        </member>
        <member name="P:fslib3.Data.ValueRange.Start">
            <summary>
            開始点を取得する
            </summary>
        </member>
        <member name="M:fslib3.Data.ValueRange.#ctor(System.Int32,System.Int32)">
            <summary>
            開始点と個数から<see cref="T:fslib3.Data.ValueRange"/>の新しいインスタンスを生成する
            </summary>
            <param name="start">開始点</param>
            <param name="count">個数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Data.ValueRange.Create(System.Int32,System.Int32)">
            <summary>
            指定した2つの値から<see cref="T:fslib3.Data.ValueRange"/>の新しいインスタンスを生成する
            </summary>
            <param name="value1">範囲を指定する値1</param>
            <param name="value2">範囲を指定する値2</param>
            <returns><see cref="T:fslib3.Data.ValueRange"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Data.ValueRange.Contains(System.Int32)">
            <summary>
            指定した値が含まれているかどうかを取得する
            </summary>
            <param name="value">検索する値</param>
            <returns><paramref name="value"/>が含まれていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.ValueRange.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.Data.ValueRange.Equals(fslib3.Data.ValueRange)">
            <summary>
            もう一つの<see cref="T:fslib3.Data.ValueRange"/>のインスタンスとの等価性を検証する
            </summary>
            <param name="other">等価性を検証する<see cref="T:fslib3.Data.ValueRange"/>のインスタンス</param>
            <returns><paramref name="other"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.ValueRange.GetEnumerator">
            <summary>
            列挙をサポートする構造体を取得する
            </summary>
            <returns><see cref="T:fslib3.Data.ValueRange.Enumerator"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Data.ValueRange.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.Data.ValueRange.Enumerator">
            <summary>
            列挙をサポートする構造体
            </summary>
        </member>
        <member name="P:fslib3.Data.ValueRange.Enumerator.Current">
            <summary>
            現在列挙されている要素を取得する
            </summary>
        </member>
        <member name="M:fslib3.Data.ValueRange.Enumerator.MoveNext">
            <summary>
            列挙を次に進める
            </summary>
            <returns>列挙を次に進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Data.ValueRangeCollection">
            <summary>
            値の範囲を登録するコレクションのクラス
            </summary>
        </member>
        <member name="P:fslib3.Data.ValueRangeCollection.Count">
            <summary>
            格納されている要素数を取得する
            </summary>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.#ctor">
            <summary>
            <see cref="T:fslib3.Data.ValueRangeCollection"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.Add(System.Int32)">
            <summary>
            指定した要素を追加する
            </summary>
            <param name="item">追加する要素</param>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.AddRange(fslib3.Data.ValueRange)">
            <summary>
            指定した範囲の要素を追加する
            </summary>
            <param name="range">追加する範囲</param>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.Clear">
            <summary>
            全ての要素を削除する
            </summary>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.Contains(System.Int32)">
            <summary>
            指定した要素が格納されているかどうかを取得する
            </summary>
            <param name="item">検索する要素</param>
            <returns><paramref name="item"/>が格納されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.CopyTo(System.Int32[],System.Int32)">
            <summary>
            指定した配列に要素をコピーする
            </summary>
            <param name="array">コピー先の配列</param>
            <param name="arrayIndex"><paramref name="array"/>におけるコピー開始地点</param>
            <exception cref="T:System.ArgumentException"><paramref name="array"/>のサイズ不足</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.GetEnumerator">
            <summary>
            列挙をサポートする列挙子を取得する
            </summary>
            <returns>列挙子の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.Remove(System.Int32)">
            <summary>
            指定した要素を削除する
            </summary>
            <param name="item">削除する要素</param>
            <returns><paramref name="item"/>を削除出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.RemoveRange(fslib3.Data.ValueRange)">
            <summary>
            指定した範囲の要素を削除する
            </summary>
            <param name="range">削除する範囲</param>
        </member>
        <member name="M:fslib3.Data.ValueRangeCollection.SplitToRange">
            <summary>
            <see cref="T:fslib3.Data.ValueRange"/>のコレクションに分割する
            </summary>
            <returns><see cref="T:fslib3.Data.ValueRange"/>のコレクション</returns>
        </member>
        <member name="T:fslib3.EnumHelper">
            <summary>
            列挙型の補助を行うクラス
            </summary>
        </member>
        <member name="M:fslib3.EnumHelper.ClearCache``1">
            <summary>
            指定した列挙型の処理のために溜められたキャッシュを解放する
            </summary>
            <typeparam name="TEnum">溜められたキャッシュを開放する列挙型の型</typeparam>
        </member>
        <member name="M:fslib3.EnumHelper.Convert``1(System.Int32)">
            <summary>
            整数値から列挙型の値を取得する
            </summary>
            <typeparam name="TEnum">取得する列挙型の型</typeparam>
            <param name="value">変換したい整数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib3.EnumHelper.Convert``1(System.UInt32)">
            <summary>
            整数値から列挙型の値を取得する
            </summary>
            <typeparam name="TEnum">取得する列挙型の型</typeparam>
            <param name="value">変換したい整数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib3.EnumHelper.Convert``1(System.Int64)">
            <summary>
            整数値から列挙型の値を取得する
            </summary>
            <typeparam name="TEnum">取得する列挙型の型</typeparam>
            <param name="value">変換したい整数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib3.EnumHelper.Convert``1(System.UInt64)">
            <summary>
            整数値から列挙型の値を取得する
            </summary>
            <typeparam name="TEnum">取得する列挙型の型</typeparam>
            <param name="value">変換したい整数値</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
        </member>
        <member name="M:fslib3.EnumHelper.Count``1">
            <summary>
            指定した列挙型のうち，定義された値の個数を取得する
            </summary>
            <typeparam name="TEnum">検索する列挙型の型</typeparam>
            <returns><typeparamref name="TEnum"/>で定義されている値の個数</returns>
        </member>
        <member name="M:fslib3.EnumHelper.GetValues``1">
            <summary>
            列挙型における定義済みの値を全て取得する
            </summary>
            <typeparam name="TEnum">取得する列挙型の型</typeparam>
            <returns><typeparamref name="TEnum"/>で定義されたすべての値</returns>
        </member>
        <member name="M:fslib3.EnumHelper.IsDefined``1(System.Int32)">
            <summary>
            指定した整数が<paramref name="value"/>の値として定義されているかどうかを取得する
            </summary>
            <typeparam name="TEnum">検索する列挙型の型</typeparam>
            <param name="value">検証する整数</param>
            <returns><paramref name="value"/>が定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.EnumHelper.IsDefined``1(System.UInt32)">
            <summary>
            指定した整数が<paramref name="value"/>の値として定義されているかどうかを取得する
            </summary>
            <typeparam name="TEnum">検索する列挙型の型</typeparam>
            <param name="value">検証する整数</param>
            <returns><paramref name="value"/>が定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.EnumHelper.IsDefined``1(System.Int64)">
            <summary>
            指定した整数が<paramref name="value"/>の値として定義されているかどうかを取得する
            </summary>
            <typeparam name="TEnum">検索する列挙型の型</typeparam>
            <param name="value">検証する整数</param>
            <returns><paramref name="value"/>が定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.EnumHelper.IsDefined``1(System.UInt64)">
            <summary>
            指定した整数が<paramref name="value"/>の値として定義されているかどうかを取得する
            </summary>
            <typeparam name="TEnum">検索する列挙型の型</typeparam>
            <param name="value">検証する整数</param>
            <returns><paramref name="value"/>が定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.EnumHelper.IsDefined``1(System.String)">
            <summary>
            指定した文字列が<paramref name="value"/>の値として定義されているかどうかを取得する
            </summary>
            <typeparam name="TEnum">検索する列挙型の型</typeparam>
            <param name="value">検証する文字列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <returns><paramref name="value"/>が定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.EnumHelper.IsDefined``1(``0)">
            <summary>
            指定した文字列が<paramref name="value"/>の値として定義されているかどうかを取得する
            </summary>
            <typeparam name="TEnum">検索する列挙型の型</typeparam>
            <param name="value">検証する<typeparamref name="TEnum"/>の値</param>
            <returns><paramref name="value"/>が定義されていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.EnumHelper.Parse``1(System.String)">
            <summary>
            文字列から列挙型の値に変換する
            </summary>
            <typeparam name="TEnum">取得する列挙型の型</typeparam>
            <param name="value">変換する文字列</param>
            <returns><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>が定義されていない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
        </member>
        <member name="M:fslib3.EnumHelper.TryParse``1(System.String,``0@)">
            <summary>
            文字列から列挙型の値に変換する
            </summary>
            <typeparam name="TEnum">取得する列挙型の型</typeparam>
            <param name="value">変換する文字列</param>
            <param name="result"><paramref name="value"/>に対応する<typeparamref name="TEnum"/>の値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>がnull</exception>
            <returns><paramref name="result"/>が見つかったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.FsMath">
            <summary>
            数学関連を扱うクラス
            </summary>
        </member>
        <member name="M:fslib3.FsMath.Max(System.Byte[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max(System.Int32[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max(System.UInt32[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max(System.Int64[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max(System.UInt64[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max(System.Single[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max(System.Double[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max(System.Decimal[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Max``1(``0[])">
            <summary>
            最大値を取得する
            </summary>
            <param name="values">最大値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <typeparam name="T">比較する要素の型</typeparam>
            <returns><paramref name="values"/>の中の最大値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.Byte[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.Int32[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.UInt32[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.Int64[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.UInt64[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.Single[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.Double[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min(System.Decimal[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="M:fslib3.FsMath.Min``1(``0[])">
            <summary>
            最小値を取得する
            </summary>
            <param name="values">最小値を検索する配列</param>
            <exception cref="T:System.ArgumentException"><paramref name="values"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
            <typeparam name="T">比較する要素の型</typeparam>
            <returns><paramref name="values"/>の中の最小値</returns>
        </member>
        <member name="T:fslib3.GenericExtension">
            <summary>
            ジェネリック関連の拡張クラス
            </summary>
        </member>
        <member name="M:fslib3.GenericExtension.GenericClone``1(``0)">
            <summary>
            指定した<see cref="T:System.ICloneable"/>のインスタンスを複製する
            </summary>
            <typeparam name="T">複製する要素の型</typeparam>
            <param name="value">複製するオブジェクト</param>
            <exception cref="T:System.InvalidCastException"><typeparamref name="T"/>にキャストできない</exception>
            <returns><paramref name="value"/>の複製</returns>
        </member>
        <member name="M:fslib3.GenericExtension.Deserialize``1(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,System.IO.Stream)">
            <summary>
            逆シリアル化する
            </summary>
            <typeparam name="T">逆シリアル化するオブジェクトの型</typeparam>
            <param name="formatter">逆シリアル化に使用する<see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>のインスタンス</param>
            <param name="serializationStream">逆シリアル化するストリーム</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="formatter"/>または<paramref name="serializationStream"/>がnull</exception>
            <exception cref="T:System.Security.SecurityException">アクセス許可がない</exception>
            <exception cref="T:System.InvalidCastException">逆シリアル化されたオブジェクトを<typeparamref name="T"/>にキャストできなかった</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="serializationStream"/>の長さが0または<typeparamref name="T"/>が<see cref="T:System.Decimal"/>でその値が範囲外</exception>
            <returns></returns>
        </member>
        <member name="M:fslib3.GenericExtension.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            シリアライズされたデータを取得する
            </summary>
            <typeparam name="T">取得するデータの型</typeparam>
            <param name="info">シリアライズされたデータを格納するオブジェクト</param>
            <param name="name">獲得するオブジェクトの名前</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/>または<paramref name="name"/>がnull</exception>
            <exception cref="T:System.InvalidCastException"><typeparamref name="T"/>へのキャストに失敗した</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="name"/>が存在しない</exception>
            <returns><paramref name="name"/>を持つ要素</returns>
        </member>
        <member name="M:fslib3.GenericExtension.IsEmptyCollection``2(``0)">
            <summary>
            nullまたは空のコレクションかどうかを取得する
            </summary>
            <typeparam name="TCollection">検証するコレクションの型</typeparam>
            <typeparam name="TValue"><typeparamref name="TCollection"/>に格納されている値の型</typeparam>
            <param name="value">検証するコレクション</param>
            <returns><paramref name="value"/>がnullか要素が無ければtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.GenericExtension.IsEmptyValue``1(``0)">
            <summary>
            指定した値がnullや0，空を表すかどうかを取得する
            </summary>
            <typeparam name="T">検証する値の型</typeparam>
            <param name="value">検証する値</param>
            <returns><paramref name="value"/>がnullや0，空を表すならtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.GenericExtension.TryGetValue``1(System.Nullable{``0},``0@)">
            <summary>
            値を取得する
            </summary>
            <typeparam name="T">null許容な構造体の内部の型</typeparam>
            <param name="nullable">使用するnull許容型構造体</param>
            <param name="value"><paramref name="nullable"/>の値 取得出来なかったら既定値</param>
            <returns><paramref name="value"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Graphics.GraphicHandler">
            <summary>
            グラフィックの処理を行うクラス
            </summary>
        </member>
        <member name="M:fslib3.Graphics.GraphicHandler.CombineGif(System.String,System.String)">
            <summary>
            Gifを1枚のPngにまとめる
            </summary>
            <param name="gifPath">読み込むGifのパス</param>
            <param name="destPath">保存するPngのパス</param>
            <returns>内部の画像数</returns>
        </member>
        <member name="M:fslib3.Graphics.GraphicHandler.CombineImages(System.String,System.String[])">
            <summary>
            画像を横に結合して保存する
            </summary>
            <param name="destPath">保存先のパス</param>
            <param name="imagePathes">読み込む画像のパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="imagePathes"/>が空</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="imagePathes"/>がnull</exception>
        </member>
        <member name="M:fslib3.Graphics.GraphicHandler.CreateGif(System.Collections.Generic.IEnumerable{System.String},System.String,System.UInt16,System.UInt16)">
            <summary>
            画像を読み込んで結合し，Gifにする
            </summary>
            <param name="imagePathes">読み込む画像のパス</param>
            <param name="gifPath">作成するGifファイルのパス</param>
            <param name="delayTime">遅延時間(1/100 sec)</param>
            <param name="loopCount">繰り返す回数 0回で無限</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素が空文字<br></br>
            - <paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素が空白文字のみからなる<br></br>
            - <paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素が無効な文字を含む<br></br>
            - <paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素に無効な:がある<br></br>
            - NTFS環境で<paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素がファイルを指定していない
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="imagePathes"/>か<paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            - <paramref name="delayTime"/>が0以下<br></br>
            - <paramref name="loopCount"/>が0未満
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">が無効なドライブを指定している</exception>
            <exception cref="T:System.InvalidOperationException">読み込んだ画像のカラーテーブルが見つからなかった</exception>
            <exception cref="T:System.IO.IOException">IOエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="gifPath"/>か<paramref name="imagePathes"/>名の要素が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Graphics.GraphicHandler.DecomposeGif(System.String,System.String,System.Func{System.Int32,System.String})">
            <summary>
            Gifファイルを分割してPngとして保存する
            </summary>
            <param name="gifPath">読み込むGifのパス</param>
            <param name="destDirectory">出力先のディレクトリ</param>
            <param name="fileNameGenerator">出力するPngファイル名を作成する関数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="gifPath"/>か<paramref name="fileNameGenerator"/>がnull</exception>
            <returns>保存されたPngのファイルパス</returns>
        </member>
        <member name="M:fslib3.Graphics.GraphicHandler.ChangeColor(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            指定した画像の色調を変更した<see cref="T:System.Drawing.Bitmap"/>の新しいインスタンスを生成する
            </summary>
            <param name="image">色調変更する画像</param>
            <param name="color">設定する色</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/>がnull</exception>
            <returns>色調変更した画像</returns>
        </member>
        <member name="T:fslib3.IO.DataWriter">
            <summary>
            データを出力するライターの基底クラス
            </summary>
        </member>
        <member name="M:fslib3.IO.DataWriter.#ctor">
            <summary>
            <see cref="T:fslib3.IO.DataWriter"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.IO.DataWriter.Dispose(System.Boolean)">
            <summary>
            このインスタンスを破棄する
            </summary>
            <param name="disposing">マネージド状態を破棄するかどうか</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Int32)">
            <summary>
            <see cref="T:System.Int32"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.UInt32)">
            <summary>
            <see cref="T:System.UInt32"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Int64)">
            <summary>
            <see cref="T:System.Int64"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.UInt64)">
            <summary>
            <see cref="T:System.UInt64"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Single)">
            <summary>
            <see cref="T:System.Single"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Double)">
            <summary>
            <see cref="T:System.Double"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Decimal)">
            <summary>
            <see cref="T:System.Decimal"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Boolean)">
            <summary>
            <see cref="T:System.Boolean"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Char)">
            <summary>
            <see cref="T:System.Char"/>型の値を出力する
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.String)">
            <summary>
            文字列を出力する
            </summary>
            <param name="value">出力する文字列</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.String,System.Object[])">
            <summary>
            指定した書式の文字列を出力する
            </summary>
            <param name="format">出力する文字列</param>
            <param name="args">入力する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>か<paramref name="args"/>がnull</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/>内のインデックスが0未満または<paramref name="args"/>のサイズ以上</exception>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Object)">
            <summary>
            オブジェクトを出力する
            </summary>
            <param name="value">出力するオブジェクト</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.Write(System.Object[])">
            <summary>
            オブジェクトを出力する
            </summary>
            <param name="values">出力するオブジェクト</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteAsync(System.String)">
            <summary>
            非同期で文字列を出力する
            </summary>
            <param name="value">出力する文字列</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine">
            <summary>
            次の行に移る
            </summary>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Int32)">
            <summary>
            <see cref="T:System.Int32"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.UInt32)">
            <summary>
            <see cref="T:System.UInt32"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Int64)">
            <summary>
            <see cref="T:System.Int64"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.UInt64)">
            <summary>
            <see cref="T:System.UInt64"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Single)">
            <summary>
            <see cref="T:System.Single"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Double)">
            <summary>
            <see cref="T:System.Double"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Decimal)">
            <summary>
            <see cref="T:System.Decimal"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Boolean)">
            <summary>
            <see cref="T:System.Boolean"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Char)">
            <summary>
            <see cref="T:System.Char"/>型の値を出力し，次の行に移る
            </summary>
            <param name="value">出力する値</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.String)">
            <summary>
            文字列を出力し，次の行に移る
            </summary>
            <param name="value">出力する文字列</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.String,System.Object[])">
            <summary>
            指定した書式の文字列を出力し，次の行に移る
            </summary>
            <param name="format">出力する文字列</param>
            <param name="args">入力する引数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/>か<paramref name="args"/>がnull</exception>
            <exception cref="T:System.FormatException"><paramref name="format"/>内のインデックスが0未満または<paramref name="args"/>のサイズ以上</exception>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Object)">
            <summary>
            オブジェクトを出力し，次の行に移る
            </summary>
            <param name="value">出力するオブジェクト</param>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLine(System.Object[])">
            <summary>
            オブジェクトを出力し，次の行に移る
            </summary>
            <param name="values">出力するオブジェクト</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLineAsync">
            <summary>
            非同期で次の行に移る
            </summary>
        </member>
        <member name="M:fslib3.IO.DataWriter.WriteLineAsync(System.String)">
            <summary>
            非同期で文字列を出力し，次の行に移る
            </summary>
            <param name="value">出力する文字列</param>
        </member>
        <member name="T:fslib3.IO.ElsxDataWriter">
            <summary>
            Xlsxにデータを出力するライターのクラス
            </summary>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.IO.ElsxDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.#ctor(System.IO.Stream)">
            <summary>
            <see cref="T:fslib3.IO.ElsxDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不可</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ElsxDataWriter.WriteLine">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.IO.TextDataWriter">
            <summary>
            テキスト形式でデータを出力するライターのクラス
            </summary>
        </member>
        <member name="P:fslib3.IO.TextDataWriter.Encoding">
            <summary>
            使用するエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.IO.TextDataWriter.NewLine">
            <summary>
            改行文字を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.IO.TextDataWriter.Separator">
            <summary>
            区切り文字を取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.String,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <param name="append">末尾にテキストを追加するかどうか falseだと上書きする</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <param name="append">末尾にテキストを追加するかどうか falseだと上書きする</param>
            <param name="encoding">使用するエンコード</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <param name="append">末尾にテキストを追加するかどうか falseだと上書きする</param>
            <param name="encoding">使用するエンコード</param>
            <param name="bufferSize">バッファーサイズ</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.IO.Stream)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <param name="encoding">使用するエンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <param name="encoding">使用するエンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <param name="encoding">使用するエンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <param name="leaveOpen">インスタンス破棄後に<paramref name="stream"/>も破棄するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.IO.TextWriter)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="writer">書き込みを行うライター</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.TextDataWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="writer">書き込みを行うライター</param>
            <param name="leaveOpen">インスタンス破棄後に<paramref name="writer"/>も破棄するかどうか</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="writer"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Flush">
            <summary>
            バッファー内の文字を出力する
            </summary>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.FlushAsync">
            <summary>
            バッファー内の文字を非同期で出力する
            </summary>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.TextDataWriter.WriteLine">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.IO.ExtensionInfo">
            <summary>
            拡張子を表す構造体
            </summary>
        </member>
        <member name="P:fslib3.IO.ExtensionInfo.Extension">
            <summary>
            拡張子を取得する
            </summary>
        </member>
        <member name="P:fslib3.IO.ExtensionInfo.IsWildCarded">
            <summary>
            ダイアログ表示時に後ろにワイルドカードをつけるかどうかを取得する
            </summary>
        </member>
        <member name="M:fslib3.IO.ExtensionInfo.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.IO.ExtensionInfo"/>の新しいインスタンスを生成する
            </summary>
            <param name="extension">拡張子</param>
        </member>
        <member name="M:fslib3.IO.ExtensionInfo.#ctor(System.String,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.ExtensionInfo"/>の新しいインスタンスを生成する
            </summary>
            <param name="extension">拡張子</param>
            <param name="wildcard">ワイルドカードをつけるかどうか</param>
        </member>
        <member name="M:fslib3.IO.ExtensionInfo.Equals(fslib3.IO.ExtensionInfo)">
            <summary>
            <see cref="T:fslib3.IO.ExtensionInfo"/>のインスタンスと等価性を検証する
            </summary>
            <param name="other">等価性を検証する<see cref="T:fslib3.IO.ExtensionInfo"/>のインスタンス</param>
            <returns><see cref="T:fslib3.IO.ExtensionInfo"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.ExtensionInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ExtensionInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.ExtensionInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.IO.FilePathHelper">
            <summary>
            ファイルパスに関する情報を検査するクラス
            </summary>
        </member>
        <member name="M:fslib3.IO.FilePathHelper.CheckLength(System.String)">
            <summary>
            指定したパスの長さが適切かどうかを判定する
            </summary>
            <param name="path">長さを判定するパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>パスの長さが260字未満かつディレクトリの長さが248字未満であったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.FilePathHelper.GetFilter(System.String,System.String[])">
            <summary>
            指定した拡張子を持つダイヤログのフィルターとして使用可能な文字列を返す
            </summary>
            <param name="message">表示するファイルの種類を表す文字列</param>
            <param name="extensions">フィルターするファイルの拡張子</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/>又は<paramref name="extensions"/>がnull</exception>
            <exception cref="T:System.FormatException"><paramref name="extensions"/>に拡張子ではない文字列が含まれていた</exception>
            <returns>フィルターと指定使用可能な文字列</returns>
        </member>
        <member name="M:fslib3.IO.FilePathHelper.GetFilter(System.Boolean,System.ValueTuple{System.String,System.Collections.Generic.IEnumerable{System.String}}[])">
            <summary>
            ファイルダイアログに使えるフィルターを取得する
            </summary>
            <param name="allFiles">全てのファイルの項目を追加するかどうか</param>
            <param name="categories">
            <list type="bullet">ファイルの種類(Text Documentなど)</list>
            <list type="bullet">ファイルの拡張子の一覧(.txt, .csvなど)</list>
            </param>
            <exception cref="T:System.ArgumentException"><paramref name="categories"/>の拡張子リストがnull</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="categories"/>がnull</exception>
            <exception cref="T:System.FormatException">書式が無効</exception>
            <returns>使用できるフィルター</returns>
        </member>
        <member name="M:fslib3.IO.FilePathHelper.GetFilter(System.Boolean,fslib3.IO.FilterEntry[])">
            <summary>
            ファイルダイアログに使えるフィルターを取得する
            </summary>
            <param name="allFiles">全てのファイルの項目を追加するかどうか</param>
            <param name="entries">
            <list type="bullet">ファイルの種類(Text Documentなど)</list>
            <list type="bullet">ファイルの拡張子の一覧(.txt, .csvなど)</list>
            </param>
            <exception cref="T:System.ArgumentException"><paramref name="entries"/>の拡張子リストがnull</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/>がnull</exception>
            <exception cref="T:System.FormatException">書式が無効</exception>
            <returns>使用できるフィルター</returns>
        </member>
        <member name="M:fslib3.IO.FilePathHelper.GetExtension(System.String)">
            <summary>
            指定したファイルパスの拡張子を返す
            </summary>
            <param name="path">拡張子を調べるファイルパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns>ファイル拡張子</returns>
        </member>
        <member name="M:fslib3.IO.FilePathHelper.HasInvalidChar(System.String)">
            <summary>
            指定したパスにファイルパスに使えない文字が入っているかどうかを判定する
            </summary>
            <param name="path">判定するパス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <returns><paramref name="path"/>に使用できない文字が含まれていたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.FilePathHelper.IsExtension(System.String)">
            <summary>
            指定した文字列がファイルの拡張子かどうかを返す
            </summary>
            <param name="extension">拡張子かどうかを調べる文字列</param>
            <returns>拡張子だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.IO.FilterEntry">
            <summary>
            ファイルダイアログのエントリークラス
            </summary>
        </member>
        <member name="P:fslib3.IO.FilterEntry.All">
            <summary>
            全てのファイルを表す<see cref="T:fslib3.IO.FilterEntry"/>のインスタンスを取得する
            </summary>
        </member>
        <member name="P:fslib3.IO.FilterEntry.Description">
            <summary>
            説明文を取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.IO.FilterEntry.Extensions">
            <summary>
            拡張子のリストを取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.IO.FilterEntry.#ctor">
            <summary>
            <see cref="T:fslib3.IO.FilterEntry"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.IO.FilterEntry.#ctor(System.String,fslib3.IO.ExtensionInfo[])">
            <summary>
            <see cref="T:fslib3.IO.FilterEntry"/>の新しいインスタンスを生成する
            </summary>
            <param name="description">説明文</param>
            <param name="extensions">拡張子のリスト</param>
        </member>
        <member name="M:fslib3.IO.FilterEntry.#ctor(System.String,System.Collections.Generic.IList{fslib3.IO.ExtensionInfo})">
            <summary>
            <see cref="T:fslib3.IO.FilterEntry"/>の新しいインスタンスを生成する
            </summary>
            <param name="description">説明文</param>
            <param name="extensions">拡張子のリスト</param>
        </member>
        <member name="M:fslib3.IO.FilterEntry.Clone">
            <summary>
            インスタンスのクローンを生成する
            </summary>
            <returns>インスタンスのクローン</returns>
        </member>
        <member name="M:fslib3.IO.FilterEntry.Equals(fslib3.IO.FilterEntry)">
            <summary>
            <see cref="T:fslib3.IO.FilterEntry"/>のインスタンスと等価性を検証する
            </summary>
            <param name="other">等価性を検証する<see cref="T:fslib3.IO.FilterEntry"/>のインスタンス</param>
            <returns><see cref="T:fslib3.IO.FilterEntry"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.FilterEntry.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.IO.FilterEntry.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.IO.IniReader">
            <summary>
            ini形式のテキストを読み込むリーダーのクラス
            </summary>
        </member>
        <member name="P:fslib3.IO.IniReader.Comment">
            <summary>
            要素のコメントを取得する
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.IO.IniReader.Token"/>が<see cref="F:fslib3.IO.IniToken.Comment"/>を含んでいない</exception>
        </member>
        <member name="P:fslib3.IO.IniReader.HasComment">
            <summary>
            コメントを読み込んでいるかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib3.IO.IniReader.HasSectionHeader">
            <summary>
            セクションのヘッダを読み込んでいるかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib3.IO.IniReader.HasValue">
            <summary>
            名前と値のペアを読み込んでいるかどうかを取得する
            </summary>
        </member>
        <member name="P:fslib3.IO.IniReader.Name">
            <summary>
            要素の名前を取得する
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.IO.IniReader.Token"/>が<see cref="F:fslib3.IO.IniToken.SectionHeader"/>か<see cref="F:fslib3.IO.IniToken.Value"/>を含んでいない</exception>
        </member>
        <member name="P:fslib3.IO.IniReader.Token">
            <summary>
            読み込まれた要素のトークンを取得する
            </summary>
        </member>
        <member name="P:fslib3.IO.IniReader.Value">
            <summary>
            要素の値を取得する
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.IO.IniReader.Token"/>が<see cref="F:fslib3.IO.IniToken.Value"/>を含んでいない</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><paramref name="path"/>が空文字</item>
            <item><paramref name="path"/>が空文字以外からなる</item>
            <item>NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが起きた</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><paramref name="path"/>が空文字</item>
            <item><paramref name="path"/>が空文字以外からなる</item>
            <item>NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが起きた</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.String,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="detectEncodingFromByteOrderMarks">ファイル最初のBOMを判定するかどうか</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><paramref name="path"/>が空文字</item>
            <item><paramref name="path"/>が空文字以外からなる</item>
            <item>NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが起きた</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <param name="detectEncodingFromByteOrderMarks">ファイル最初のBOMを判定するかどうか</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><paramref name="path"/>が空文字</item>
            <item><paramref name="path"/>が空文字以外からなる</item>
            <item>NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが起きた</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <param name="detectEncodingFromByteOrderMarks">ファイル最初のBOMを判定するかどうか</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><paramref name="path"/>が空文字</item>
            <item><paramref name="path"/>が空文字以外からなる</item>
            <item>NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0以下</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが存在しない</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが起きた</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイル以外の要素を示している</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.IO.Stream)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が読み取りに対応していない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が読み取りに対応していない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>または<paramref name="encoding"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">読み込むファイルのパス</param>
            <param name="detectEncodingFromByteOrderMarks">ファイル最初のBOMを判定するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が読み取りに対応していない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <param name="detectEncodingFromByteOrderMarks">ファイル最初のBOMを判定するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が読み取りに対応していない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>または<paramref name="encoding"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <param name="detectEncodingFromByteOrderMarks">ファイル最初のBOMを判定するかどうか</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が読み取りに対応していない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>または<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0以下</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.IniReader"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <param name="detectEncodingFromByteOrderMarks">ファイル最初のBOMを判定するかどうか</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <param name="leaveOpen">破棄後に内部のストリームを閉じるかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が読み取りに対応していない</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>または<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0以下</exception>
        </member>
        <member name="M:fslib3.IO.IniReader.Dispose(System.Boolean)">
            <summary>
            このインスタンスを破棄する
            </summary>
            <param name="disposing">マネージド状態を破棄するかどうか</param>
        </member>
        <member name="M:fslib3.IO.IniReader.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.IO.IniReader.Read">
            <summary>
            読み込みを進める
            </summary>
            <returns>読み込みを進められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetComment(System.String@)">
            <summary>
            コメントを取得する
            </summary>
            <param name="comment">読み込まれているコメント 読み込めなかったら既定値</param>
            <returns><paramref name="comment"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetSectionHeader(System.String@)">
            <summary>
            セクションのヘッダを取得する
            </summary>
            <param name="sectionHeader">読み込まれているセクションのヘッダ 読み込めなかったら既定値</param>
            <returns><paramref name="sectionHeader"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetInt32(System.String@,System.Int32@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetUInt32(System.String@,System.UInt32@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetInt64(System.String@,System.Int64@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetUInt64(System.String@,System.UInt64@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetSingle(System.String@,System.Single@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetDouble(System.String@,System.Double@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetDecimal(System.String@,System.Decimal@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetChar(System.String@,System.Char@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetBoolean(System.String@,System.Boolean@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetValue(System.String@,System.String@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.IO.IniReader.TryGetValue(System.String@,fslib3.Data.StringBox@)">
            <summary>
            名前と値のペアを取得する
            </summary>
            <param name="name">読み込まれている名前 読み込めなかったら既定値</param>
            <param name="value">読み込まれている値 読み込めなかったら既定値</param>
            <returns><paramref name="name"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.IO.IniToken">
            <summary>
            ini形式のファイルのトークンの列挙体
            </summary>
        </member>
        <member name="F:fslib3.IO.IniToken.Unknown">
            <summary>
            未知の値
            </summary>
        </member>
        <member name="F:fslib3.IO.IniToken.Comment">
            <summary>
            コメント
            </summary>
        </member>
        <member name="F:fslib3.IO.IniToken.SectionHeader">
            <summary>
            セクションのヘッダー
            </summary>
        </member>
        <member name="F:fslib3.IO.IniToken.Value">
            <summary>
            値
            </summary>
        </member>
        <member name="T:fslib3.IO.IniWriter">
            <summary>
            ini形式でファイルを出力するライターのクラス
            </summary>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.String,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <param name="append">末尾にテキストを追加するかどうか falseだと上書きする</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <param name="append">末尾にテキストを追加するかどうか falseだと上書きする</param>
            <param name="encoding">使用するエンコード</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き込むファイルのパス</param>
            <param name="append">末尾にテキストを追加するかどうか falseだと上書きする</param>
            <param name="encoding">使用するエンコード</param>
            <param name="bufferSize">バッファーサイズ</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet"><paramref name="path"/>が空文字</list>
            <list type="bullet"><paramref name="path"/>が空白文字のみからなる</list>
            <list type="bullet">NTFS環境で<paramref name="path"/>がファイルを指定していない</list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なディレクトリを参照している</exception>
            <exception cref="T:System.IO.IOException">I/Oエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">非NTFS環境で<paramref name="path"/>がファイルを指定していない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">適切な権限がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">書き込みが出来ない等の理由でファイルへのサクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.IO.Stream)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <param name="encoding">使用するエンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <param name="encoding">使用するエンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            <see cref="T:fslib3.IO.IniWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き込み先のストリーム</param>
            <param name="encoding">使用するエンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <param name="leaveOpen">インスタンス破棄後に<paramref name="stream"/>も破棄するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が書き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Dispose(System.Boolean)">
            <summary>
            このインスタンスを破棄する
            </summary>
            <param name="disposing">マネージド状態を破棄するかどうか</param>
        </member>
        <member name="M:fslib3.IO.IniWriter.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.Int32)">
            <summary>
            数値を書き込む
            </summary>
            <param name="name">書き込む数値の名前</param>
            <param name="value">書き込む数値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.UInt32)">
            <summary>
            数値を書き込む
            </summary>
            <param name="name">書き込む数値の名前</param>
            <param name="value">書き込む数値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.Int64)">
            <summary>
            数値を書き込む
            </summary>
            <param name="name">書き込む数値の名前</param>
            <param name="value">書き込む数値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.UInt64)">
            <summary>
            数値を書き込む
            </summary>
            <param name="name">書き込む数値の名前</param>
            <param name="value">書き込む数値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.Single)">
            <summary>
            数値を書き込む
            </summary>
            <param name="name">書き込む数値の名前</param>
            <param name="value">書き込む数値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.Double)">
            <summary>
            数値を書き込む
            </summary>
            <param name="name">書き込む数値の名前</param>
            <param name="value">書き込む数値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.Decimal)">
            <summary>
            数値を書き込む
            </summary>
            <param name="name">書き込む数値の名前</param>
            <param name="value">書き込む数値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.Char)">
            <summary>
            文字を書き込む
            </summary>
            <param name="name">書き込む文字の名前</param>
            <param name="value">書き込む文字</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.Boolean)">
            <summary>
            論理値を書き込む
            </summary>
            <param name="name">書き込む論理値の名前</param>
            <param name="value">書き込む論理値</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.Write(System.String,System.String)">
            <summary>
            文字列を書き込む
            </summary>
            <param name="name">書き込む文字列の名前</param>
            <param name="value">書き込む文字列</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="M:fslib3.IO.IniWriter.WriteComment(System.String)">
            <summary>
            コメントを出力する
            </summary>
            <param name="message">出力するコメント</param>
        </member>
        <member name="M:fslib3.IO.IniWriter.WriteSection(System.String)">
            <summary>
            セクションを開始する
            </summary>
            <param name="name">セクション名</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/>の長さが0</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>がnull</exception>
        </member>
        <member name="T:fslib3.IO.IOHandler">
            <summary>
            I/Oの制御を行うクラス
            </summary>
        </member>
        <member name="M:fslib3.IO.IOHandler.BinaryDeserialize``1(System.String)">
            <summary>
            バイナリ形式でオブジェクトを読み込む
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <typeparam name="T">読み込むオブジェクトの型</typeparam>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたファイルのディレクトリが不正</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定したファイルが見つからない</exception>
            <exception cref="T:System.InvalidCastException"><typeparamref name="T"/>へのキャストに失敗した</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が特定の拡張子を持つ</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元にアクセス許可がない</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><typeparamref name="T"/>が<see cref="T:System.Decimal"/>で，その値が範囲外</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/>で指定されたファイルが読み取り専用</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.BinarySerialize(System.String,System.Object)">
            <summary>
            バイナリ形式でオブジェクトを保存する
            </summary>
            <param name="path">生成するファイルのパス</param>
            <param name="value">シリアライズするオブジェクト</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="value"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたファイルのディレクトリが不正</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が特定の拡張子を持つ</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元にアクセス許可がない</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="value"/>がシリアライズに対応していない</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="path"/>で指定されたファイルが読み取り専用</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.JsonDeserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            JSON形式でデシリアライズを行う
            </summary>
            <typeparam name="T">デシリアライズするオブジェクトの型</typeparam>
            <param name="path">デシリアライズ元のパス</param>
            <param name="options">デシリアライズのオプション</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空文字</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>が<see langword="null"/></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが見つからない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.Text.Json.JsonException">
            <list type="bullet">
            <item>JSONが無効</item>
            <item><typeparamref name="T"/>がJSONに使用できない</item>
            <item>デシリアライズ完了時にJSONの記述に残りがある</item>
            </list>
            </exception>
            <exception cref="T:System.NotSupportedException">適切な<see cref="T:System.Text.Json.Serialization.JsonConverter"/>が見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.JsonSerialize``1(System.String,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            JSON形式でシリアライズを行う
            </summary>
            <typeparam name="T">シリアライズするオブジェクトの型</typeparam>
            <param name="path">シリアライズ先のパス</param>
            <param name="value">シリアライズするオブジェクト</param>
            <param name="options">シリアライズのオプション</param>
            <exception cref="T:System.ArgumentException">
            <list type="bullet">
            <item><paramref name="path"/>が空文字</item>
            <item><paramref name="path"/>がシステムデバイスを指定している</item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが見つからない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の文法が無効</exception>
            <exception cref="T:System.NotSupportedException">適切な<see cref="T:System.Text.Json.Serialization.JsonConverter"/>が見つからない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">要求された権限がなかった</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.EnsureDirectory(System.String)">
            <summary>
            指定したディレクトリが存在しなかったらディレクトリを生成する
            </summary>
            <param name="path">チェックするディレクトリ</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>が空白文字のみからなる<br></br>
            - <paramref name="path"/>が無効な文字を含む<br></br>
            - <paramref name="path"/>に無効な:がある
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>が無効なドライブを指定している</exception>
            <exception cref="T:System.IO.IOException">
            - <paramref name="path"/>がファイルを示している<br></br>
            - <paramref name="path"/>が未知のネットワークを指定している
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が無効な:を含んでいる</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセス権限がない</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.ReadCsv(System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            Csv形式でデータを読み込む
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="encoding">使用するエンコード</param>
            <param name="rowSeprator">行を分ける文字列</param>
            <param name="valueSeparator">行の中の値を分ける文字列</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空文字</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>，<paramref name="encoding"/>，<paramref name="rowSeprator"/>，<paramref name="valueSeparator"/>のいずれかがnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定したディレクトリが見つからない</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定したファイルが存在しない</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>が無効な書式</exception>
            <returns>読み込まれたデータを格納する<see cref="T:fslib3.Data.TableData"/>のインスタンス</returns>
        </member>
        <member name="M:fslib3.IO.IOHandler.ReadText(System.String)">
            <summary>
            指定したパスからテキストを読み込む
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたファイルのディレクトリが不正</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">I/O上のエラー</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>に無効な構文が含まれている</exception>
            <exception cref="T:System.OutOfMemoryException">メモリ不足</exception>
            <returns><paramref name="path"/>に書かれているテキスト全て</returns>
        </member>
        <member name="M:fslib3.IO.IOHandler.ReadText(System.String,System.Text.Encoding)">
            <summary>
            指定したパスからテキストを読み込む
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="encoding">使用する文字エンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/>または<paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたファイルのディレクトリが不正</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">I/O上のエラー</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>に無効な構文が含まれている</exception>
            <exception cref="T:System.OutOfMemoryException">メモリ不足</exception>
            <returns><paramref name="path"/>に書かれているテキスト全て</returns>
        </member>
        <member name="M:fslib3.IO.IOHandler.ReadTexts(System.String)">
            <summary>
            指定したパスからテキストを読み込む
            </summary>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたファイルのディレクトリが不正</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">I/O上のエラー</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>に無効な構文が含まれている</exception>
            <exception cref="T:System.OutOfMemoryException">メモリ不足</exception>
            <returns><paramref name="path"/>に書かれているテキスト 行ごとに要素が変わる</returns>
        </member>
        <member name="M:fslib3.IO.IOHandler.ReadTexts(System.String,System.Text.Encoding)">
            <summary>
            指定したパスからテキストを読み込む
            </summary>
            <param name="path">読み込むファイルのパス</param>
            <param name="encoding">使用する文字エンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空白文字のみからなる</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/>または<paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたファイルのディレクトリが不正</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/>で指定されたファイルが見つからない</exception>
            <exception cref="T:System.IO.IOException">I/O上のエラー</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/>に無効な構文が含まれている</exception>
            <exception cref="T:System.OutOfMemoryException">メモリ不足</exception>
            <returns><paramref name="path"/>に書かれているテキスト 行ごとに要素が変わる</returns>
        </member>
        <member name="M:fslib3.IO.IOHandler.SaveToFile(System.IO.Stream,System.String)">
            <summary>
            <see cref="T:System.IO.Stream"/>の内容をファイルに出力する
            </summary>
            <param name="from">使用する<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="path">出力先のファイル</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>が空白文字のみからなる<br></br>
            - <paramref name="path"/>が無効な文字を含む<br></br>
            - <paramref name="path"/>に無効な:がある<br></br>
            - NTFS環境で<paramref name="path"/>がファイルを指定していない
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="from"/>か<paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">が無効なドライブを指定している</exception>
            <exception cref="T:System.IO.IOException">IOエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">
            - 非NTFS環境で<paramref name="path"/>がファイルを指定していない<br></br>
            - <paramref name="from"/>が読み取り不可
            </exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="from"/>が閉じられている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.WriteText(System.String,System.String)">
            <summary>
            指定したパスにテキストを書き込む
            </summary>
            <param name="path">生成するファイルのパス</param>
            <param name="message">書き込むテキスト</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空文字のみからなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>におけるディレクトリが不正</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>に無効な構文が含まれている，またはI/O上のエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">バッファーが一杯で書き込めない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元にアクセス許可がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.WriteText(System.String,System.Text.Encoding,System.String)">
            <summary>
            指定したパスにテキストを書き込む
            </summary>
            <param name="path">生成するファイルのパス</param>
            <param name="encoding">使用する文字エンコード</param>
            <param name="message">書き込むテキスト</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空文字のみからなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>におけるディレクトリが不正</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>に無効な構文が含まれている，またはI/O上のエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">バッファーが一杯で書き込めない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元にアクセス許可がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.WriteTexts(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            指定したパスにテキストを書き込む
            </summary>
            <param name="path">生成するファイルのパス</param>
            <param name="messages">書き込むテキスト 要素ごとに改行される</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空文字のみからなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="messages"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>におけるディレクトリが不正</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>に無効な構文が含まれている，またはI/O上のエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">バッファーが一杯で書き込めない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元にアクセス許可がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.IO.IOHandler.WriteTexts(System.String,System.Text.Encoding,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            指定したパスにテキストを書き込む
            </summary>
            <param name="path">生成するファイルのパス</param>
            <param name="encoding">使用する文字エンコード</param>
            <param name="messages">書き込むテキスト 要素ごとに改行される</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/>が空文字のみからなるまたは特定の拡張子を持つ</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>または<paramref name="messages"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>におけるディレクトリが不正</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>に無効な構文が含まれている，またはI/O上のエラーが発生した</exception>
            <exception cref="T:System.NotSupportedException">バッファーが一杯で書き込めない</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">呼び出し元にアクセス許可がない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="T:fslib3.Text.Code.CssEntry">
            <summary>
            cssの情報を持つクラス
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CssEntry.Name">
            <summary>
            cssの名前を取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CssEntry.Settings">
            <summary>
            設定内容を取得する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.CssEntry.Create(System.String,fslib3.Text.Code.CssEntry.Setting[])">
            <summary>
            <see cref="T:fslib3.Text.Code.CssEntry"/>の新しいインスタンスを生成する
            </summary>
            <param name="name">名前</param>
            <param name="settings">設定内容</param>
            <returns><see cref="T:fslib3.Text.Code.CssEntry"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Text.Code.CssEntry.Create(System.String[],fslib3.Text.Code.CssEntry.Setting[])">
            <summary>
            <see cref="T:fslib3.Text.Code.CssEntry"/>の新しいインスタンスを生成する
            </summary>
            <param name="names">名前</param>
            <param name="settings">設定内容</param>
            <returns><see cref="T:fslib3.Text.Code.CssEntry"/>の新しいインスタンス</returns>
        </member>
        <member name="M:fslib3.Text.Code.CssEntry.CreateFromClass(System.String,fslib3.Text.Code.CssEntry.Setting[])">
            <summary>
            <see cref="T:fslib3.Text.Code.CssEntry"/>の新しいインスタンスを生成する
            </summary>
            <param name="className">クラスの名前</param>
            <param name="settings">設定内容</param>
            <returns><see cref="T:fslib3.Text.Code.CssEntry"/>の新しいインスタンス</returns>
        </member>
        <member name="T:fslib3.Text.Code.CssEntry.Setting">
            <summary>
            cssにおける設定を表す構造体
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CssEntry.Setting.Name">
            <summary>
            設定名を取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CssEntry.Setting.Value">
            <summary>
            設定の値を取得する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.CssEntry.Setting.#ctor(System.String,System.String)">
            <summary>
            指定した名前と設定を用いて<see cref="T:fslib3.Text.Code.CssEntry.Setting"/>の新しいインスタンスを生成する
            </summary>
            <param name="name">名前</param>
            <param name="value">値</param>
        </member>
        <member name="M:fslib3.Text.Code.CssEntry.Setting.Equals(fslib3.Text.Code.CssEntry.Setting)">
            <summary>
            指定した<see cref="T:fslib3.Text.Code.CssEntry.Setting"/>との等価性を判定する
            </summary>
            <param name="other">等価性を判定する<see cref="T:fslib3.Text.Code.CssEntry.Setting"/>のインスタンス</param>
            <returns><paramref name="other"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Text.Code.CssEntry.Setting.Equals(System.Object)">
            <summary>
            指定した<see cref="T:System.Object"/>との等価性を判定する
            </summary>
            <param name="obj">等価性を判定する<see cref="T:fslib3.Text.Code.CssEntry.Setting"/>のインスタンス</param>
            <returns><paramref name="obj"/>との等価性が認められたらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.Text.Code.CssEntry.Setting.GetHashCode">
            <summary>
            ハッシュコードを取得する
            </summary>
            <returns>このインスタンスのハッシュコード</returns>
        </member>
        <member name="T:fslib3.Text.Code.CsWriter">
            <summary>
            C#のコードを生成するクラス
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CsWriter.AutoFlush">
            <summary>
            自動的に<see cref="M:fslib3.Text.Code.CsWriter.Flush"/>を実行するかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CsWriter.BaseStream">
            <summary>
            書き出し先の<see cref="T:System.IO.Stream"/>のインスタンスを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CsWriter.Encoding">
            <summary>
            エンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CsWriter.IndentLevel">
            <summary>
            現在のインデントの深さを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.CsWriter.NewLine">
            <summary>
            改行文字を取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.String,System.Boolean)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <param name="encoding">エンコード</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.IO.Stream)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            <see cref="T:fslib3.Text.Code.CsWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <param name="leaveOpen">インスタンス破棄後に<paramref name="stream"/>を閉じずに保持するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.DisposeAsync">
            <summary>
            このインスタンスを非同期的に破棄する
            </summary>
            <returns>破棄の完了を通知するオブジェクト</returns>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.BeginCodeBlock(System.String)">
            <summary>
            {}で囲まれたブロックを書き始める
            </summary>
            <param name="head">ブロック前に書かれるテキスト</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.EndCodeBlock">
            <summary>
            {}で囲まれたブロックを終了する
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.Text.Code.CsWriter.IndentLevel"/>が1未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.EndCodeBlock(System.String)">
            <summary>
            {}で囲まれたブロックを終了する
            </summary>
            <param name="tail">}の後に追加するテキスト</param>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.Text.Code.CsWriter.IndentLevel"/>が1未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Flush">
            <summary>
            バッファー内部を出力する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Write(System.Int32)">
            <summary>
            数値を出力する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Write(System.UInt32)">
            <summary>
            数値を出力する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Write(System.Int64)">
            <summary>
            数値を出力する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Write(System.UInt64)">
            <summary>
            数値を出力する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Write(System.Char)">
            <summary>
            文字を出力する
            </summary>
            <param name="value">書き出す文字</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.Write(System.String)">
            <summary>
            文字列を出力する
            </summary>
            <param name="value">書き出す文字列</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.WriteLine">
            <summary>
            改行する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.WriteLine(System.Int32)">
            <summary>
            数値を出力し，改行する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.WriteLine(System.UInt32)">
            <summary>
            数値を出力し，改行する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.WriteLine(System.Int64)">
            <summary>
            数値を出力し，改行する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.WriteLine(System.UInt64)">
            <summary>
            数値を出力し，改行する
            </summary>
            <param name="value">書き出す数値</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.WriteLine(System.Char)">
            <summary>
            文字を出力し，改行する
            </summary>
            <param name="value">書き出す文字</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.WriteLine(System.String)">
            <summary>
            文字列を出力し，改行する
            </summary>
            <param name="value">書き出す文字列</param>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.DecrementIndent">
            <summary>
            <see cref="P:fslib3.Text.Code.CsWriter.IndentLevel"/>を一段階下げる
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.Text.Code.CsWriter.IndentLevel"/>が1未満</exception>
            <returns>下がった<see cref="P:fslib3.Text.Code.CsWriter.IndentLevel"/></returns>
        </member>
        <member name="M:fslib3.Text.Code.CsWriter.IncrementIndent">
            <summary>
            <see cref="P:fslib3.Text.Code.CsWriter.IndentLevel"/>を一段階上げる
            </summary>
            <returns>上がった<see cref="P:fslib3.Text.Code.CsWriter.IndentLevel"/></returns>
        </member>
        <member name="T:fslib3.Text.Code.HtmlWriter">
            <summary>
            Htmlのコードを生成するクラス
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.HtmlWriter.AutoFlush">
            <summary>
            自動的に<see cref="M:fslib3.Text.Code.HtmlWriter.Flush"/>を実行するかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.HtmlWriter.BaseStream">
            <summary>
            書き出し先の<see cref="T:System.IO.Stream"/>のインスタンスを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.HtmlWriter.Encoding">
            <summary>
            使用するエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.HtmlWriter.NewLine">
            <summary>
            改行文字を取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.String,System.Boolean)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <param name="encoding">エンコード</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.IO.Stream)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            <see cref="T:fslib3.Text.Code.HtmlWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <param name="leaveOpen">インスタンス破棄後に<paramref name="stream"/>を閉じずに保持するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.BeginContent(System.String)">
            <summary>
            要素を書き始める
            </summary>
            <param name="name">出力するタグ</param>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.BeginContent(System.String,System.String)">
            <summary>
            要素を書き始める
            </summary>
            <param name="name">出力するタグ</param>
            <param name="attribute">出力するタグ内の追加テキスト</param>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.Close">
            <summary>
            ストリームを閉じる
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.EndContent">
            <summary>
            最新のタグを終了する
            </summary>
            <exception cref="T:System.InvalidOperationException">タグの出力中ではない</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.Flush">
            <summary>
            バッファー内のテキストを出力し，バッファーを空にする
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.Write(System.String)">
            <summary>
            文字列を出力する
            </summary>
            <param name="value">出力する文字列</param>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.WriteAttribute(System.String)">
            <summary>
            ＜＞に囲まれたテキストを出力する
            </summary>
            <param name="value">出力するテキスト</param>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.WriteCss(fslib3.Text.Code.CssEntry[])">
            <summary>
            cssを出力する
            </summary>
            <param name="entries">出力するcssの情報</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="entries"/>がnull</exception>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.WriteElement(System.String,System.String)">
            <summary>
            要素を出力する
            </summary>
            <param name="tag">タグのテキスト</param>
            <param name="value">タグに挟まれるテキスト</param>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.WriteElement(System.String,System.String,System.String)">
            <summary>
            要素を出力する
            </summary>
            <param name="tag">タグのテキスト</param>
            <param name="value">タグに挟まれるテキスト</param>
            <param name="attribute">タグ内の追加テキスト</param>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.WriteLine">
            <summary>
            改行する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.WriteLine(System.String)">
            <summary>
            テキストを出力し改行する
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:fslib3.Text.Code.HtmlWriter.Dispose(System.Boolean)">
            <summary>
            このインスタンスを破棄する
            </summary>
            <param name="disposing">マネージドリソースも破棄するかどうか</param>
        </member>
        <member name="T:fslib3.Text.Code.SlnWriter">
            <summary>
            slnファイルを出力するクラス
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.SlnWriter.AutoFlush">
            <summary>
            自動的に<see cref="M:fslib3.Text.Code.SlnWriter.Flush"/>を実行するかどうかを取得または設定する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.SlnWriter.BaseStream">
            <summary>
            書き出し先の<see cref="T:System.IO.Stream"/>のインスタンスを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.SlnWriter.Encoding">
            <summary>
            使用するエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.SlnWriter.IndentLevel">
            <summary>
            インデントの深さを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.Code.SlnWriter.NewLine">
            <summary>
            改行文字を取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.String)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.String,System.Boolean)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <param name="encoding">エンコード</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="path">書き出し先のファイル</param>
            <param name="append">既にあるテキストの末尾に追加するかどうか</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException">
            - <paramref name="path"/>が空文字<br></br>
            - <paramref name="path"/>がシステムデバイスを含んでいる
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/>で指定されたディレクトリが存在しない</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/>の書式が間違っている</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/>が長すぎる</exception>
            <exception cref="T:System.Security.SecurityException">callerが要求された権限を持っていない</exception>
            <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否された</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.IO.Stream)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>がnull</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            <see cref="T:fslib3.Text.Code.SlnWriter"/>の新しいインスタンスを生成する
            </summary>
            <param name="stream">書き出し先の<see cref="T:System.IO.Stream"/>のインスタンス</param>
            <param name="encoding">エンコード</param>
            <param name="bufferSize">バッファーのサイズ</param>
            <param name="leaveOpen">インスタンス破棄後に<paramref name="stream"/>を閉じずに保持するかどうか</param>
            <exception cref="T:System.ArgumentException"><paramref name="stream"/>が掻き込み不能</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/>か<paramref name="encoding"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/>が0未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.BeginBlock(System.String)">
            <summary>
            ブロックを書き始める
            </summary>
            <param name="header">ブロック名</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.BeginBlock(System.String,System.String)">
            <summary>
            ブロックを書き始める
            </summary>
            <param name="header">ブロック名</param>
            <param name="value"><paramref name="header"/>に与える値</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.BeginBlock(System.String,System.String,System.String)">
            <summary>
            ブロックを書き始める
            </summary>
            <param name="header">ブロック名</param>
            <param name="argName">値を設定する要素名</param>
            <param name="value"><paramref name="argName"/>に与える値</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.Close">
            <summary>
            ストリームを閉じる
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.Dispose">
            <summary>
            このインスタンスを破棄する
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.EndBlock">
            <summary>
            ブロックを終了する
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.Text.Code.SlnWriter.IndentLevel"/>が1未満</exception>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.Flush">
            <summary>
            バッファー内のテキストを出力し，バッファーを空にする
            </summary>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.Write(System.Char)">
            <summary>
            文字を出力する
            </summary>
            <param name="value">出力する文字</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.Write(System.String)">
            <summary>
            文字列を出力する
            </summary>
            <param name="value">出力する文字列</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.WriteLine(System.Char)">
            <summary>
            文字を出力して改行する
            </summary>
            <param name="value">出力する文字</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.WriteLine(System.String)">
            <summary>
            文字列を出力して改行する
            </summary>
            <param name="value">出力する文字列</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.WriteLine(System.String,System.String[])">
            <summary>
            値の設定を出力する
            </summary>
            <param name="value">値を設定する要素</param>
            <param name="values">設定する値</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.DecrementIndent">
            <summary>
            <see cref="P:fslib3.Text.Code.SlnWriter.IndentLevel"/>を一段階下げる
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:fslib3.Text.Code.SlnWriter.IndentLevel"/>が1未満</exception>
            <returns>下がった<see cref="P:fslib3.Text.Code.SlnWriter.IndentLevel"/></returns>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.Dispose(System.Boolean)">
            <summary>
            このインスタンスを破棄する
            </summary>
            <param name="disposing">マネージドリソースも破棄するかどうか</param>
        </member>
        <member name="M:fslib3.Text.Code.SlnWriter.IncrementIndent">
            <summary>
            <see cref="P:fslib3.Text.Code.SlnWriter.IndentLevel"/>を一段階上げる
            </summary>
            <returns>上がった<see cref="P:fslib3.Text.Code.SlnWriter.IndentLevel"/></returns>
        </member>
        <member name="T:fslib3.Text.EncodeHelper">
            <summary>
            エンコードの補助クラス
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeHelper.UTF8">
            <summary>
            UTF-8 BOM無しのエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeHelper.UTF8BOM">
            <summary>
            UTF-8 BOMありのエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeHelper.UTF16BE">
            <summary>
            UTF-16 BE(BOMあり)のエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeHelper.UTF16LE">
            <summary>
            UTF-16 LE(BOM無し)のエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeHelper.UTF32BE">
            <summary>
            UTF-32 BE(BOMあり)のエンコードを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeHelper.UTF32LE">
            <summary>
            UTF-32 LE(BOM無し)のエンコードを取得する
            </summary>
        </member>
        <member name="M:fslib3.Text.EncodeHelper.TryGetEncoding(System.Byte[],System.Text.Encoding@)">
            <summary>
            エンコードを取得する
            </summary>
            <param name="buffer">使用するテキストファイルの情報</param>
            <param name="encoding">返されるエンコード 見つからなかったら既定値</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/>がnull</exception>
            <returns><paramref name="encoding"/>を取得出来たらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:fslib3.Text.EncodingType">
            <summary>
            エンコードの方法
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.Default">
            <summary>
            既定のエンコードタイプ
            安定しない可能性あり
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.ASCII">
            <summary>
            ASCII
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF7">
            <summary>
            UTF7
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF8">
            <summary>
            UTF8のBOM無し
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF8WithBOM">
            <summary>
            UTF8のBOM付き
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF16LE">
            <summary>
            UTF16のリトルエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF16LEWithBOM">
            <summary>
            UTF16のリトルエンディアンBOM付き
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF16BE">
            <summary>
            UTF16のビッグエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF16BEWithBOM">
            <summary>
            UTF16のビッグエンディアンBOM付き
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF32LE">
            <summary>
            UTF32のリトルエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF32LEWithBOM">
            <summary>
            UTF32のリトルエンディアンBOM付き
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF32BE">
            <summary>
            UTF32のビッグエンディアンBOM無し
            </summary>
        </member>
        <member name="F:fslib3.Text.EncodingType.UTF32BEWithBOM">
            <summary>
            UTF32のビッグエンディアンBOM付き
            </summary>
        </member>
        <member name="T:fslib3.Text.EncodeOption">
            <summary>
            文字エンコードのオプションのクラス。
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeOption.Default">
            <summary>
            <see cref="F:fslib3.Text.EncodingType.UTF8"/>による<see cref="T:fslib3.Text.EncodeOption"/>を取得する。
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeOption.Encoding">
            <summary>
            エンコードクラスを取得する。
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeOption.Decoder">
            <summary>
            バイトシーケンスを文字に変換するデコーダーを取得する
            </summary>
        </member>
        <member name="P:fslib3.Text.EncodeOption.Encoder">
            <summary>
            文字のエンコーダーを取得する
            </summary>
        </member>
        <member name="M:fslib3.Text.EncodeOption.#ctor">
            <summary>
            既定の値を使用して<see cref="T:fslib3.Text.EncodeOption"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="M:fslib3.Text.EncodeOption.#ctor(System.String)">
            <summary>
            エンコードを指定する文字列を使用して<see cref="T:fslib3.Text.EncodeOption"/>の新しいインスタンスを生成する
            </summary>
            <param name="name">指定するエンコードの名前</param>
            <exception cref="T:System.ArgumentException">指定したエンコード名が見つからなかった</exception>
        </member>
        <member name="M:fslib3.Text.EncodeOption.#ctor(fslib3.Text.EncodingType)">
            <summary>
            エンコードの種類を示す列挙型を使用して<see cref="T:fslib3.Text.EncodeOption"/>の新しいインスタンスを生成する
            </summary>
            <param name="type">エンコードのタイプ</param>
            <exception cref="T:System.ArgumentException"><paramref name="type"/>が定義されていない値</exception>
        </member>
        <member name="T:fslib3.ValueChangedEventArgs`1">
            <summary>
            値の変更イベントの情報を表すクラス
            </summary>
            <typeparam name="T">格納される要素の型</typeparam>
        </member>
        <member name="P:fslib3.ValueChangedEventArgs`1.NewValue">
            <summary>
            変更後の値を取得する
            </summary>
        </member>
        <member name="P:fslib3.ValueChangedEventArgs`1.OldValue">
            <summary>
            変更前の値を取得する
            </summary>
        </member>
        <member name="M:fslib3.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            <see cref="T:fslib3.ValueChangedEventArgs`1"/>の新しいインスタンスを生成する
            </summary>
            <param name="oldValue">変更前の値</param>
            <param name="newValue">変更後の値</param>
        </member>
        <member name="T:fslib3.ValueChangedEventHandler`1">
            <summary>
            値変更のイベントを司るイベントハンドラ
            </summary>
            <typeparam name="T">変更される値の型</typeparam>
            <param name="sender">イベントの送信者</param>
            <param name="e">イベントの情報</param>
        </member>
        <member name="T:fslib3.WPF.CommandBase">
            <summary>
            実行されるコマンドのクラス
            </summary>
        </member>
        <member name="M:fslib3.WPF.CommandBase.#ctor">
            <summary>
            <see cref="T:fslib3.WPF.CommandBase"/>の新しいインスタンスを生成する
            </summary>
        </member>
        <member name="E:fslib3.WPF.CommandBase.CanExecuteChanged">
            <summary>
            実行可否が変更された時に実行
            </summary>
        </member>
        <member name="M:fslib3.WPF.CommandBase.CanExecute(System.Object)">
            <summary>
            コマンドの実行可否を取得する
            </summary>
            <param name="value">使用する引数</param>
            <returns>コマンドが実行可能だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.WPF.CommandBase.Execute(System.Object)">
            <summary>
            コマンドを実行する
            </summary>
            <param name="value">使用する引数</param>
        </member>
        <member name="M:fslib3.WPF.CommandBase.OnCanExecuteChanged(System.EventArgs)">
            <summary>
            <see cref="E:fslib3.WPF.CommandBase.CanExecuteChanged"/>を実行する
            </summary>
            <param name="e">使用するイベントの情報</param>
        </member>
        <member name="T:fslib3.WPF.DelegateCommand">
            <summary>
            匿名関数を用いるコマンドのクラス
            </summary>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            <see cref="T:fslib3.WPF.DelegateCommand"/>の新しいインスタンスを生成する
            </summary>
            <param name="action">実行するコマンド</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/>がnull</exception>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            <see cref="T:fslib3.WPF.DelegateCommand"/>の新しいインスタンスを生成する
            </summary>
            <param name="action">実行するコマンド</param>
            <param name="canExecute">実行できるかどうかを返す関数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/>がnull</exception>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.WPF.DelegateCommand`1">
            <summary>
            匿名関数を用いるコマンドのクラス
            </summary>
            <typeparam name="T">使用する引数の型</typeparam>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            <see cref="T:fslib3.WPF.DelegateCommand"/>の新しいインスタンスを生成する
            </summary>
            <param name="action">実行するコマンド</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/>がnull</exception>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            <see cref="T:fslib3.WPF.DelegateCommand"/>の新しいインスタンスを生成する
            </summary>
            <param name="action">実行するコマンド</param>
            <param name="canExecute">実行できるかどうかを返す関数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/>がnull</exception>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand`1.CanExecute(`0)">
            <summary>
            コマンドの実行可否を取得する
            </summary>
            <param name="value">使用する引数</param>
            <returns>コマンドが実行可能だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand`1.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand`1.Execute(`0)">
            <summary>
            コマンドを実行する
            </summary>
            <param name="value">使用する引数</param>
        </member>
        <member name="M:fslib3.WPF.DelegateCommand`1.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:fslib3.WPF.NoArgDelegateCommand">
            <summary>
            引数無しの匿名関数を用いるコマンドのクラス
            </summary>
        </member>
        <member name="P:fslib3.WPF.NoArgDelegateCommand.IsEnableExecute">
            <summary>
            コマンドが実行可能かどうかを取得または設定する
            </summary>
        </member>
        <member name="M:fslib3.WPF.NoArgDelegateCommand.#ctor(System.Action)">
            <summary>
            <see cref="T:fslib3.WPF.NoArgDelegateCommand"/>の新しいインスタンスを生成する
            </summary>
            <param name="action">実行するコマンド</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/>がnull</exception>
        </member>
        <member name="M:fslib3.WPF.NoArgDelegateCommand.CanExecute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:fslib3.WPF.NoArgDelegateCommand.Execute">
            <summary>
            コマンドを実行する
            </summary>
        </member>
        <member name="M:fslib3.WPF.NoArgDelegateCommand.Execute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Altseed2.InputExtension">
            <summary>
            Altseed2の入力関連の拡張クラス
            </summary>
        </member>
        <member name="M:Altseed2.InputExtension.IsFree(Altseed2.Mouse,Altseed2.MouseButton)">
            <summary>
            指定したマウスボタンが離されているかどうかを取得する
            </summary>
            <param name="mouse">使用する<see cref="T:Altseed2.Mouse"/>のインスタンス</param>
            <param name="button">検証するマウスボタン</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mouse"/>がnull</exception>
            <returns><paramref name="button"/>が<see cref="F:Altseed2.ButtonState.Free"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.IsFree(Altseed2.Keyboard,Altseed2.Key)">
            <summary>
            指定したキーが離されているかどうかを取得する
            </summary>
            <param name="keyboard">使用する<see cref="T:Altseed2.Keyboard"/>のインスタンス</param>
            <param name="key">検証するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyboard"/>がnull</exception>
            <returns><paramref name="key"/>が<see cref="F:Altseed2.ButtonState.Free"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.IsHolded(Altseed2.Mouse,Altseed2.MouseButton)">
            <summary>
            指定したマウスボタンが押されているかどうかを取得する
            </summary>
            <param name="mouse">使用する<see cref="T:Altseed2.Mouse"/>のインスタンス</param>
            <param name="button">検証するマウスボタン</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mouse"/>がnull</exception>
            <returns><paramref name="button"/>が<see cref="F:Altseed2.ButtonState.Hold"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.IsHolded(Altseed2.Keyboard,Altseed2.Key)">
            <summary>
            指定したキーが押されているかどうかを取得する
            </summary>
            <param name="keyboard">使用する<see cref="T:Altseed2.Keyboard"/>のインスタンス</param>
            <param name="key">検証するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyboard"/>がnull</exception>
            <returns><paramref name="key"/>が<see cref="F:Altseed2.ButtonState.Hold"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.IsPushed(Altseed2.Mouse,Altseed2.MouseButton)">
            <summary>
            指定したマウスボタンが押されたかどうかを取得する
            </summary>
            <param name="mouse">使用する<see cref="T:Altseed2.Mouse"/>のインスタンス</param>
            <param name="button">検証するマウスボタン</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mouse"/>がnull</exception>
            <returns><paramref name="button"/>が<see cref="F:Altseed2.ButtonState.Push"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.IsPushed(Altseed2.Keyboard,Altseed2.Key)">
            <summary>
            指定したキーが押されたかどうかを取得する
            </summary>
            <param name="keyboard">使用する<see cref="T:Altseed2.Keyboard"/>のインスタンス</param>
            <param name="key">検証するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyboard"/>がnull</exception>
            <returns><paramref name="key"/>が<see cref="F:Altseed2.ButtonState.Push"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.IsReleased(Altseed2.Mouse,Altseed2.MouseButton)">
            <summary>
            指定したマウスボタンが離されたかどうかを取得する
            </summary>
            <param name="mouse">使用する<see cref="T:Altseed2.Mouse"/>のインスタンス</param>
            <param name="button">検証するマウスボタン</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mouse"/>がnull</exception>
            <returns><paramref name="button"/>が<see cref="F:Altseed2.ButtonState.Release"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.IsReleased(Altseed2.Keyboard,Altseed2.Key)">
            <summary>
            指定したキーが離されたかどうかを取得する
            </summary>
            <param name="keyboard">使用する<see cref="T:Altseed2.Keyboard"/>のインスタンス</param>
            <param name="key">検証するキー</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyboard"/>がnull</exception>
            <returns><paramref name="key"/>が<see cref="F:Altseed2.ButtonState.Release"/>だったらtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.InputExtension.SetCursorImage(Altseed2.Mouse,System.String,Altseed2.Vector2I)">
            <summary>
            指定したpng画像を読み込んで生成された<see cref="T:Altseed2.Cursor"/>のインスタンスを生成してマウスに設定する
            </summary>
            <param name="mouse">使用する<see cref="T:Altseed2.Mouse"/>のインスタンス</param>
            <param name="path">読み込むpng画像のパス</param>
            <param name="hot">カーソルのクリック中心座標</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mouse"/>または<paramref name="path"/>がnull</exception>
            <exception cref="T:System.InvalidOperationException">カーソル生成に失敗した</exception>
            <returns>生成された<see cref="T:Altseed2.Cursor"/>のインスタンス</returns>
        </member>
        <member name="T:Altseed2.MathHandler">
            <summary>
            数学系を扱うクラス
            </summary>
        </member>
        <member name="M:Altseed2.MathHandler.AdjustSize(Altseed2.RectF)">
            <summary>
            大きさを正の値に調整する
            </summary>
            <param name="rect">調整する<see cref="T:Altseed2.RectF"/>のインスタンス</param>
            <returns>サイズが調整された<paramref name="rect"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed2.MathHandler.AdjustSize(Altseed2.RectI)">
            <summary>
            大きさを正の値に調整する
            </summary>
            <param name="rect">調整する<see cref="T:Altseed2.RectI"/>のインスタンス</param>
            <returns>サイズが調整された<paramref name="rect"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed2.MathHandler.Clamp(Altseed2.Vector2F,Altseed2.RectF)">
            <summary>
            指定した領域内に収まるように座標を丸める
            </summary>
            <param name="vector">丸める座標</param>
            <param name="area">指定する領域</param>
            <returns><paramref name="vector"/>を<paramref name="area"/>内に丸めたもの</returns>
        </member>
        <member name="M:Altseed2.MathHandler.Clamp(Altseed2.Vector2I,Altseed2.RectI)">
            <summary>
            指定した領域内に収まるように座標を丸める
            </summary>
            <param name="vector">丸める座標</param>
            <param name="area">指定する領域</param>
            <returns><paramref name="vector"/>を<paramref name="area"/>内に丸めたもの</returns>
        </member>
        <member name="M:Altseed2.MathHandler.Contains(Altseed2.RectF,Altseed2.Vector2F)">
            <summary>
            指定した領域に座標が含まれるかどうかを取得する
            </summary>
            <param name="rect">検索する領域</param>
            <param name="vector">検証する座標</param>
            <returns><paramref name="vector"/>が<paramref name="rect"/>で指定される領域内に含まれる場合はtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.MathHandler.Contains(Altseed2.RectI,Altseed2.Vector2I)">
            <summary>
            指定した領域に座標が含まれるかどうかを取得する
            </summary>
            <param name="rect">検索する領域</param>
            <param name="vector">検証する座標</param>
            <returns><paramref name="vector"/>が<paramref name="rect"/>で指定される領域内に含まれる場合はtrue，それ以外でfalse</returns>
        </member>
        <member name="M:Altseed2.MathHandler.ToPolar(Altseed2.Vector2F)">
            <summary>
            極座標に変換する
            </summary>
            <param name="vector">使用するベクトル</param>
            <returns><see cref="T:fslib3.Altseed2.PolarPosition2F"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed2.MathHandler.To3I(Altseed2.Vector3I)">
            <summary>
            2次元に変換する
            </summary>
            <param name="xyz">X，Y，Z</param>
            <returns><see cref="T:Altseed2.Vector2I"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed2.MathHandler.To3F(Altseed2.Vector3F)">
            <summary>
            2次元に変換する
            </summary>
            <param name="xyz">X，Y，Z</param>
            <returns><see cref="T:Altseed2.Vector2F"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed2.MathHandler.To3I(Altseed2.Vector2I,System.Int32)">
            <summary>
            3次元に変換する
            </summary>
            <param name="xy">X，Y</param>
            <param name="z">Z</param>
            <returns><see cref="T:Altseed2.Vector3I"/>のインスタンス</returns>
        </member>
        <member name="M:Altseed2.MathHandler.To3F(Altseed2.Vector2F,System.Single)">
            <summary>
            3次元に変換する
            </summary>
            <param name="xy">X，Y</param>
            <param name="z">Z</param>
            <returns><see cref="T:Altseed2.Vector3F"/>のインスタンス</returns>
        </member>
        <member name="T:Altseed2.NodeExtension">
            <summary>
            Altseed2のノードの拡張クラス
            </summary>
        </member>
        <member name="M:Altseed2.NodeExtension.GetAbsoluteAngle(Altseed2.TransformNode)">
            <summary>
            指定した<see cref="T:Altseed2.TransformNode"/>の絶対角度を取得する
            </summary>
            <param name="node">使用する<see cref="T:Altseed2.TransformNode"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
            <returns><paramref name="node"/>の絶対角度</returns>
        </member>
        <member name="M:Altseed2.NodeExtension.GetAbsolutePosition(Altseed2.TransformNode)">
            <summary>
            指定した<see cref="T:Altseed2.TransformNode"/>の絶対座標を取得する
            </summary>
            <param name="node">使用する<see cref="T:Altseed2.TransformNode"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
            <returns><paramref name="node"/>の絶対座標</returns>
        </member>
        <member name="M:Altseed2.NodeExtension.GetAbsoluteScale(Altseed2.TransformNode)">
            <summary>
            指定した<see cref="T:Altseed2.TransformNode"/>の絶対拡大率を取得する
            </summary>
            <param name="node">使用する<see cref="T:Altseed2.TransformNode"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
            <returns><paramref name="node"/>の絶対拡大率</returns>
        </member>
        <member name="M:Altseed2.NodeExtension.GetArea(Altseed2.TransformNode)">
            <summary>
            指定した<see cref="T:Altseed2.TransformNode"/>の領域を取得する
            </summary>
            <param name="node">使用する<see cref="T:Altseed2.TransformNode"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
            <returns><paramref name="node"/>の領域</returns>
        </member>
        <member name="M:Altseed2.NodeExtension.RemoveMyself(Altseed2.Node)">
            <summary>
            自身を親から削除する
            </summary>
            <param name="node">削除するノード</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/>がnull</exception>
            <returns><paramref name="node"/>の削除に成功したらtrue，それ以外でfalse</returns>
        </member>
        <member name="T:System.ArrayExtension">
            <summary>
            配列の拡張クラス
            </summary>
        </member>
        <member name="M:System.ArrayExtension.AsReadOnly``1(``0[])">
            <summary>
            読み取り専用のコレクションとして返す
            </summary>
            <typeparam name="T">格納されている要素の型</typeparam>
            <param name="array">操作する配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <returns><paramref name="array"/>の読み取り専用コレクションのインスタンス</returns>
        </member>
        <member name="M:System.ArrayExtension.Clear(System.Array)">
            <summary>
            全ての要素を削除する
            </summary>
            <param name="array">操作する配列</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
        </member>
        <member name="M:System.ArrayExtension.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            指定した範囲の要素を削除する
            </summary>
            <param name="array">操作する配列</param>
            <param name="index">削除開始インデックス</param>
            <param name="length">削除する要素数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/>がnull</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/>・<paramref name="length"/>が0未満または削除する要素の最終インデックスが配列長を超える</exception>
        </member>
        <member name="T:System.Collections.Generic.CollectionExtensions">
            <summary>
            <see cref="N:System.Collections.Generic"/>の拡張
            </summary>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AddRange``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            指定した要素をまとめて追加する
            </summary>
            <typeparam name="T">格納されている要素の型</typeparam>
            <param name="list">対象のリスト</param>
            <param name="items">追加する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/>または<paramref name="items"/>がnull</exception>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AsReadOnly``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            読み取り専用コレクションとして返す
            </summary>
            <typeparam name="T">格納する要素の型</typeparam>
            <param name="set">使用する<see cref="T:System.Collections.Generic.HashSet`1"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/>がnull</exception>
            <returns><paramref name="set"/>の読み取り専用のインスタンス</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            読み取り専用のディクショナリとして返す
            </summary>
            <typeparam name="TKey">キーとなる型</typeparam>
            <typeparam name="TValue">値となる型</typeparam>
            <param name="dictionary">使用する<see cref="T:System.Collections.Generic.IDictionary`2"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
            <returns><paramref name="dictionary"/>の読み取り専用インスタンス</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.AsReadOnly``3(fslib3.Collections.IDoubleKeyDictionary{``0,``1,``2})">
            <summary>
            読み取り専用のディクショナリとして返す
            </summary>
            <typeparam name="TKey1">キーとなる型1</typeparam>
            <typeparam name="TKey2">キーとなる型2</typeparam>
            <typeparam name="TValue">値となる型</typeparam>
            <param name="dictionary">使用する<see cref="T:fslib3.Collections.IDoubleKeyDictionary`3"/>のインスタンス</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>がnull</exception>
            <returns><paramref name="dictionary"/>の読み取り専用インスタンス</returns>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.InsertRange``1(System.Collections.Generic.List{``0},System.Int32,``0[])">
            <summary>
            指定した要素をまとめて挿入する
            </summary>
            <typeparam name="T">格納されている要素の型</typeparam>
            <param name="list">対象のリスト</param>
            <param name="index">挿入位置</param>
            <param name="items">挿入する要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/>または<paramref name="items"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.List`1.Count"/>より大きい</exception>
        </member>
        <member name="M:System.Collections.Generic.CollectionExtensions.RemoveAt``1(System.Collections.Generic.IList{``0},System.Int32,``0@)">
            <summary>
            指定したインデックスの要素を削除する
            </summary>
            <typeparam name="T">格納される要素の型</typeparam>
            <param name="list">削除を行うリスト</param>
            <param name="index">削除する要素のインデックス</param>
            <param name="removed">削除された要素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/>がnull</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/>が0未満または<see cref="P:System.Collections.Generic.ICollection`1.Count"/>以上</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="list"/>が読み取り専用</exception>
        </member>
        <member name="T:System.Linq.LinqPlus">
            <summary>
            <see cref="T:System.Linq.Enumerable"/>の拡張
            </summary>
        </member>
        <member name="M:System.Linq.LinqPlus.ToDoubleKeyDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            <see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <typeparam name="TSource">元となるコレクションの要素の型</typeparam>
            <typeparam name="TKey1">キーとなる要素の型1</typeparam>
            <typeparam name="TKey2">キーとなる要素の型2</typeparam>
            <param name="source">コピー元となるコレクション</param>
            <param name="key1selector"><typeparamref name="TKey1"/>型の要素に変換する関数</param>
            <param name="key2selector"><typeparamref name="TKey2"/>型の要素に変換する関数</param>
            <exception cref="T:System.ArgumentException">キーの組み合わせに重複が発生した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>，<paramref name="key1selector"/>，<paramref name="key2selector"/>のいずれかがnull</exception>
            <returns>指定したキーの組み合わせと値を持つ<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンス</returns>
        </member>
        <member name="M:System.Linq.LinqPlus.ToDoubleKeyDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            <see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <typeparam name="TSource">元となるコレクションの要素の型</typeparam>
            <typeparam name="TKey1">キーとなる要素の型1</typeparam>
            <typeparam name="TKey2">キーとなる要素の型2</typeparam>
            <param name="source">コピー元となるコレクション</param>
            <param name="key1selector"><typeparamref name="TKey1"/>型の要素に変換する関数</param>
            <param name="key2selector"><typeparamref name="TKey2"/>型の要素に変換する関数</param>
            <param name="comparer1"><typeparamref name="TKey1"/>型の要素の等価比較に使用する等価比較子 nullの場合は既定の物を使用する</param>
            <param name="comparer2"><typeparamref name="TKey2"/>型の要素の等価比較に使用する等価比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentException">キーの組み合わせに重複が発生した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>，<paramref name="key1selector"/>，<paramref name="key2selector"/>のいずれかがnull</exception>
            <returns>指定したキーの組み合わせと値を持つ<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンス</returns>
        </member>
        <member name="M:System.Linq.LinqPlus.ToDoubleKeyDictionary``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3})">
            <summary>
            <see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <typeparam name="TSource">元となるコレクションの要素の型</typeparam>
            <typeparam name="TKey1">キーとなる要素の型1</typeparam>
            <typeparam name="TKey2">キーとなる要素の型2</typeparam>
            <typeparam name="TElement">値となる要素の型</typeparam>
            <param name="source">コピー元となるコレクション</param>
            <param name="key1selector"><typeparamref name="TKey1"/>型の要素に変換する関数</param>
            <param name="key2selector"><typeparamref name="TKey2"/>型の要素に変換する関数</param>
            <param name="elementselector"><typeparamref name="TElement"/>型の要素に変換する関数</param>
            <exception cref="T:System.ArgumentException">キーの組み合わせに重複が発生した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>，<paramref name="key1selector"/>，<paramref name="key2selector"/>，<paramref name="elementselector"/>のいずれかがnull</exception>
            <returns>指定したキーの組み合わせと値を持つ<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンス</returns>
        </member>
        <member name="M:System.Linq.LinqPlus.ToDoubleKeyDictionary``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            <see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンスを生成する
            </summary>
            <typeparam name="TSource">元となるコレクションの要素の型</typeparam>
            <typeparam name="TKey1">キーとなる要素の型1</typeparam>
            <typeparam name="TKey2">キーとなる要素の型2</typeparam>
            <typeparam name="TElement">値となる要素の型</typeparam>
            <param name="source">コピー元となるコレクション</param>
            <param name="key1selector"><typeparamref name="TKey1"/>型の要素に変換する関数</param>
            <param name="key2selector"><typeparamref name="TKey2"/>型の要素に変換する関数</param>
            <param name="elementselector"><typeparamref name="TSource"/>型の要素に変換する関数</param>
            <param name="comparer1"><typeparamref name="TKey1"/>型の要素の等価比較に使用する等価比較子 nullの場合は既定の物を使用する</param>
            <param name="comparer2"><typeparamref name="TKey2"/>型の要素の等価比較に使用する等価比較子 nullの場合は既定の物を使用する</param>
            <exception cref="T:System.ArgumentException">キーの組み合わせに重複が発生した</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>，<paramref name="key1selector"/>，<paramref name="key2selector"/>，<paramref name="elementselector"/>のいずれかがnull</exception>
            <returns>指定したキーの組み合わせと値を持つ<see cref="T:fslib3.Collections.DoubleKeyDictionary`3"/>の新しいインスタンス</returns>
        </member>
    </members>
</doc>
